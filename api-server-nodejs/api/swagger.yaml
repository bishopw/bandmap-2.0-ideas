---
swagger: "2.0"
info:
  description: "Welcome to the Seattle Band Map API!  This is a [RESTful web interface](https://en.wikipedia.org/wiki/Representational_state_transfer)\
    \ for accessing info about Seattle bands and how they are connected."
  version: "1.0.0"
  title: "Band Map"
host: "localhost:3000"
basePath: "/api"
tags:
- name: "API Root"
  description: "General API info."
- name: "Bands"
  description: "Resources about bands."
- name: "People"
  description: "Resources about band members and related people."
- name: "Roles"
  description: "Resources about the roles people have in bands."
- name: "Connections"
  description: "Resources about connections between bands."
- name: "Locations"
  description: "Resources related to the geographic location of bands."
- name: "Admin"
  description: "Resources related to Band Map site and app administration."
schemes:
- "http"
produces:
- "application/json"
paths:
  /:
    get:
      tags:
      - "API Root"
      summary: "Get general API info and a listing of resources available at the API\
        \ root."
      description: "Get general API info and a listing of resources available at the\
        \ API root."
      operationId: "rootGET"
      parameters:
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "Object containing API info and a listing of resources available\
            \ at the API root."
          schema:
            $ref: "#/definitions/APIRootListing"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "APIRoot"
  /bands:
    get:
      tags:
      - "Bands"
      summary: "Get the collection of bands with band info."
      description: "Get the collection of bands with band info."
      operationId: "bandsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of bands with band info."
          schema:
            $ref: "#/definitions/Bands"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Bands"
    post:
      tags:
      - "Bands"
      summary: "Submit a new band or bands."
      description: "Submit a new band or bands to the bands collection.  Bands must\
        \ be submitted in an array, even if there is only one."
      operationId: "bandsPOST"
      parameters:
      - in: "body"
        name: "bands"
        description: "An array containing one or more bands to add to the bands collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more bands to add to the bands\
            \ collection."
          items:
            $ref: "#/definitions/BandInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified band(s) were added successfully.  The newly\
            \ added band(s) are returned in the response body array with their assigned\
            \ IDs and links.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added band(s) with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Band"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
    put:
      tags:
      - "Bands"
      summary: "Replace or add the specified band(s)."
      description: "Replace or add the specified band(s).  Specify the band or bands\
        \ to be replaced/added using band id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "bandsPUT"
      parameters:
      - in: "body"
        name: "bandsPut"
        description: "An array containing one or more bands specified by id or name.\
          \  If you specify a band by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more bands specified by id or name.\
            \  If you specify a band by name that is not found in the collection already,\
            \ it will be added instead of replaced."
          items:
            $ref: "#/definitions/BandInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified band(s) were replaced successfully.  The replaced\
            \ band(s) are returned in the response body array in their new form. \
            \ The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new bands\
            \ were added."
          schema:
            type: "array"
            description: "The specified band(s) were modified successfully.  The modified\
              \ band(s) are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new bands were added."
            items:
              $ref: "#/definitions/Band"
            minItems: 1
        201:
          description: "The specified band(s) were replaced and/or added successfully.\
            \  The replaced/added band(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ bands were new additions to the collection, not just replacements of\
            \ existing bands."
          schema:
            type: "array"
            description: "The specified band(s) were replaced and/or added successfully.\
              \  The replaced/added band(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ bands were new additions to the collection, not just replacements\
              \ of existing bands."
            items:
              $ref: "#/definitions/Band"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
    delete:
      tags:
      - "Bands"
      summary: "Delete specified band(s)."
      description: "Delete specified band(s)."
      operationId: "bandsDELETE"
      parameters:
      - in: "body"
        name: "bandsDelete"
        description: "An array containing the IDs or names of one or more bands to\
          \ delete from the bands collection.  Use either this request body or the\
          \ provided query args to select which bands you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular bands specified will cause\
          \ ALL bands to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more bands\
            \ to delete from the bands collection.  Use either this request body or\
            \ the provided query args to select which bands you want to delete.  WARNING:\
            \ A DELETE call to this URI with no particular bands specified will cause\
            \ ALL bands to be deleted and the ENTIRE collection to be cleared."
          items:
            $ref: "#/definitions/BandBasicsInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified bands were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
    patch:
      tags:
      - "Bands"
      summary: "Modify or add the specified band(s)."
      description: "Modify or add the specified band(s).  Specify the band or bands\
        \ to be modified/added using band id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "bandsPATCH"
      parameters:
      - in: "body"
        name: "bandsPatch"
        description: "An array containing one or more partial band objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any bands by name that are not found in the collection\
          \ already, they will be added instead of modified.  If you are modifying\
          \ band info represented by an array, like the \"people\" array of band members\
          \ and associated people, you must specify an entire new \"people\" array\
          \ to replace the old one."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial band objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any bands by name that are not found in the\
            \ collection already, they will be added instead of modified.  If you\
            \ are modifying band info represented by an array, like the \"people\"\
            \ array of band members and associated people, you must specify an entire\
            \ new \"people\" array to replace the old one."
          items:
            $ref: "#/definitions/BandInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified band(s) were modified successfully.  The modified\
            \ band(s) are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new bands were added."
          schema:
            type: "array"
            description: "The specified band(s) were modified successfully.  The modified\
              \ band(s) are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new bands were added."
            items:
              $ref: "#/definitions/Band"
            minItems: 1
        201:
          description: "The specified band(s) were modified and/or added successfully.\
            \  The modified/added band(s) are returned in the response body array\
            \ with their assigned IDs and links.  The response array can be filtered,\
            \ sorted, and paged with query arg parameters as with the GET response,\
            \ if desired.  A 201 response code specifically indicates that one or\
            \ more of the bands were new additions to the collection, not just modifications\
            \ of existing bands."
          schema:
            type: "array"
            description: "The specified band(s) were modified and/or added successfully.\
              \  The modified/added band(s) are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the bands were new additions to the collection, not just modifications\
              \ of existing bands."
            items:
              $ref: "#/definitions/Band"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
  /bands/{band}:
    get:
      tags:
      - "Bands"
      summary: "Get the specified band."
      description: "Get the specified band with its band info."
      operationId: "bandsBandGET"
      parameters:
      - name: "band"
        in: "path"
        description: "The ID or name of the target band.  If you are specifying the\
          \ band by name, preserve any spaces between words in the band name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified band with its band info."
          schema:
            $ref: "#/definitions/Band"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Bands"
    put:
      tags:
      - "Bands"
      summary: "Replace the specified band."
      description: "Replace the specified band."
      operationId: "bandsBandPUT"
      parameters:
      - name: "band"
        in: "path"
        description: "The ID or name of the target band.  If you are specifying the\
          \ band by name, preserve any spaces between words in the band name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "bandPut"
        description: "A new band to replace the specified band."
        required: true
        schema:
          $ref: "#/definitions/BandInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified band was replaced successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Band"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
    delete:
      tags:
      - "Bands"
      summary: "Delete the specified band."
      description: "Delete the specified band."
      operationId: "bandsBandDELETE"
      parameters:
      - name: "band"
        in: "path"
        description: "The ID or name of the target band.  If you are specifying the\
          \ band by name, preserve any spaces between words in the band name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified band was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
    patch:
      tags:
      - "Bands"
      summary: "Modify the specified band."
      description: "Modify the specified band."
      operationId: "bandsBandPATCH"
      parameters:
      - name: "band"
        in: "path"
        description: "The ID or name of the target band.  If you are specifying the\
          \ band by name, preserve any spaces between words in the band name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "bandPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ band.  If you are modifying band info represented by an array, like the\
          \ \"people\" array of band members and associated people, you must specify\
          \ an entire new \"people\" array to replace the old one."
        required: true
        schema:
          $ref: "#/definitions/BandInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified band was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Band"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Bands"
  /people:
    get:
      tags:
      - "People"
      summary: "Get the collection of people with their info."
      description: "Get the collection of people with their info."
      operationId: "peopleGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of people with their info."
          schema:
            $ref: "#/definitions/People"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "People"
    post:
      tags:
      - "People"
      summary: "Submit a new person or people."
      description: "Submit a new person or people to the people collection.  People\
        \ must be submitted in an array, even if there is only one."
      operationId: "peoplePOST"
      parameters:
      - in: "body"
        name: "people"
        description: "An array containing one or more people to add to the people\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more people to add to the people\
            \ collection."
          items:
            $ref: "#/definitions/PersonInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified people were added successfully.  The newly added\
            \ people are returned in the response body array with their assigned IDs\
            \ and links.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added people with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Person"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
    put:
      tags:
      - "People"
      summary: "Replace or add the specified people."
      description: "Replace or add the specified person or people.  Specify the person/people\
        \ to be replaced/added using person id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "peoplePUT"
      parameters:
      - in: "body"
        name: "peoplePut"
        description: "An array containing one or more people specified by id or name.\
          \  If you specify a person by name that is not found in the collection already,\
          \ they will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more people specified by id or\
            \ name.  If you specify a person by name that is not found in the collection\
            \ already, they will be added instead of replaced."
          items:
            $ref: "#/definitions/PersonInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified people were replaced successfully.  The replaced\
            \ people are returned in the response body array in their new form.  The\
            \ response array can be filtered, sorted, and paged with query arg parameters\
            \ as with the GET response, if desired.  A 200 response code specifically\
            \ indicates that only replacements occurred - no new people were added."
          schema:
            type: "array"
            description: "The specified people were replaced successfully.  The replaced\
              \ people are returned in the response body array in their new form.\
              \  The response array can be filtered, sorted, and paged with query\
              \ arg parameters as with the GET response, if desired.  A 200 response\
              \ code specifically indicates that only replacements occurred - no new\
              \ people were added."
            items:
              $ref: "#/definitions/Person"
            minItems: 1
        201:
          description: "The specified people were replaced and/or added successfully.\
            \  The replaced/added people are returned in the response body array in\
            \ their new form.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired.  A 201\
            \ response code specifically indicates that one or more of the people\
            \ were new additions to the collection, not just replacements of existing\
            \ people."
          schema:
            type: "array"
            description: "The specified people were replaced and/or added successfully.\
              \  The replaced/added people are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ people were new additions to the collection, not just replacements\
              \ of existing people."
            items:
              $ref: "#/definitions/Person"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
    delete:
      tags:
      - "People"
      summary: "Delete specified people."
      description: "Delete specified people."
      operationId: "peopleDELETE"
      parameters:
      - in: "body"
        name: "peopleDelete"
        description: "An array containing the IDs or names of one or more people to\
          \ delete from the people collection.  Use either this request body or the\
          \ provided query args to select which people you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular people specified will cause\
          \ ALL people to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more people\
            \ to delete from the people collection.  Use either this request body\
            \ or the provided query args to select which people you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular people specified\
            \ will cause ALL people to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/PersonBasicsInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified people were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
    patch:
      tags:
      - "People"
      summary: "Modify or add the specified person or people."
      description: "Modify or add the specified person or people.  Specify the person/people\
        \ to be modified/added using person id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "peoplePATCH"
      parameters:
      - in: "body"
        name: "peoplePatch"
        description: "An array containing one or more partial person objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any people by name that are not found in the collection\
          \ already, they will be added instead of modified.  If you are modifying\
          \ nested person info represented by an array, like the \"cities\" array\
          \ inside a person object, you must specify an entire new \"cities\" array\
          \ to replace the old one."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial person objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any people by name that are not found in the\
            \ collection already, they will be added instead of modified.  If you\
            \ are modifying nested person info represented by an array, like the \"\
            cities\" array inside a person object, you must specify an entire new\
            \ \"cities\" array to replace the old one."
          items:
            $ref: "#/definitions/PersonInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified people were modified successfully.  The modified\
            \ people are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new people were added."
          schema:
            type: "array"
            description: "The specified people were modified successfully.  The modified\
              \ people are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new people were added."
            items:
              $ref: "#/definitions/Person"
            minItems: 1
        201:
          description: "The specified people were modified and/or added successfully.\
            \  The modified/added people are returned in the response body array with\
            \ their assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ people were new additions to the collection, not just modifications\
            \ of existing people."
          schema:
            type: "array"
            description: "The specified people were modified and/or added successfully.\
              \  The modified/added people are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the people were new additions to the collection, not just\
              \ modifications of existing people."
            items:
              $ref: "#/definitions/Person"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
  /people/{person}:
    get:
      tags:
      - "People"
      summary: "Get the specified person."
      description: "Get the specified person with their info."
      operationId: "peoplePersonGET"
      parameters:
      - name: "person"
        in: "path"
        description: "The ID or name of the target person.  If you are specifying\
          \ the person by name, preserve any spaces between words in their name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified person with their info."
          schema:
            $ref: "#/definitions/Person"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "People"
    put:
      tags:
      - "People"
      summary: "Replace the specified person."
      description: "Replace the specified person."
      operationId: "peoplePersonPUT"
      parameters:
      - name: "person"
        in: "path"
        description: "The ID or name of the target person.  If you are specifying\
          \ the person by name, preserve any spaces between words in their name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "personPut"
        description: "A new person to replace the specified person."
        required: true
        schema:
          $ref: "#/definitions/PersonInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified person was replaced successfully.  They are\
            \ returned in their new form in the response body.  The response fields\
            \ can be filtered or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Person"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
    delete:
      tags:
      - "People"
      summary: "Delete the specified person."
      description: "Delete the specified person."
      operationId: "peoplePersonDELETE"
      parameters:
      - name: "person"
        in: "path"
        description: "The ID or name of the target person.  If you are specifying\
          \ the person by name, preserve any spaces between words in their name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified person was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
    patch:
      tags:
      - "People"
      summary: "Modify the specified person."
      description: "Modify the specified person."
      operationId: "peoplePersonPATCH"
      parameters:
      - name: "person"
        in: "path"
        description: "The ID or name of the target person.  If you are specifying\
          \ the person by name, preserve any spaces between words in their name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "personPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ person.  If you are modifying nested person info represented by an array,\
          \ like the \"cities\" array inside a person object, you must specify an\
          \ entire new \"cities\" array to replace the old one."
        required: true
        schema:
          $ref: "#/definitions/PersonInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified person was modified successfully.  They are\
            \ returned in their new form in the response body.  The response fields\
            \ can be filtered or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Person"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "People"
  /roles:
    get:
      tags:
      - "Roles"
      summary: "Get the collection of band roles (instruments played, etc.)."
      description: "Get the collection of band roles (instruments played, etc.)."
      operationId: "rolesGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of roles with their info."
          schema:
            $ref: "#/definitions/Roles"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Roles"
    post:
      tags:
      - "Roles"
      summary: "Submit a new role or roles."
      description: "Submit a new role or roles to the roles collection.  Roles must\
        \ be submitted in an array, even if there is only one."
      operationId: "rolesPOST"
      parameters:
      - in: "body"
        name: "roles"
        description: "An array containing one or more roles to add to the roles collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more roles to add to the roles\
            \ collection."
          items:
            $ref: "#/definitions/RoleInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified roles were added successfully.  The newly added\
            \ roles are returned in the response body array with their assigned IDs\
            \ and links.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added roles with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Role"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    put:
      tags:
      - "Roles"
      summary: "Replace or add the specified role(s)."
      description: "Replace or add the specified role(s).  Specify the role(s) to\
        \ be replaced/added using role id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "rolesPUT"
      parameters:
      - in: "body"
        name: "rolesPut"
        description: "An array containing one or more roles specified by id or name.\
          \  If you specify a role by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more roles specified by id or name.\
            \  If you specify a role by name that is not found in the collection already,\
            \ it will be added instead of replaced."
          items:
            $ref: "#/definitions/RoleInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified role(s) were replaced successfully.  The replaced\
            \ role(s) are returned in the response body array in their new form. \
            \ The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new roles\
            \ were added."
          schema:
            type: "array"
            description: "The specified role(s) were replaced successfully.  The replaced\
              \ role(s) are returned in the response body array in their new form.\
              \  The response array can be filtered, sorted, and paged with query\
              \ arg parameters as with the GET response, if desired.  A 200 response\
              \ code specifically indicates that only replacements occurred - no new\
              \ roles were added."
            items:
              $ref: "#/definitions/Role"
            minItems: 1
        201:
          description: "The specified role(s) were replaced and/or added successfully.\
            \  The replaced/added role(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ roles were new additions to the collection, not just replacements of\
            \ existing roles."
          schema:
            type: "array"
            description: "The specified role(s) were replaced and/or added successfully.\
              \  The replaced/added role(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ roles were new additions to the collection, not just replacements\
              \ of existing roles."
            items:
              $ref: "#/definitions/Role"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      summary: "Delete specified role(s)."
      description: "Delete specified role(s)."
      operationId: "rolesDELETE"
      parameters:
      - in: "body"
        name: "rolesDelete"
        description: "An array containing the IDs or names of one or more roles to\
          \ delete from the roles collection.  Use either this request body or the\
          \ provided query args to select which roles you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular roles specified will cause\
          \ ALL roles to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more roles\
            \ to delete from the roles collection.  Use either this request body or\
            \ the provided query args to select which roles you want to delete.  WARNING:\
            \ A DELETE call to this URI with no particular roles specified will cause\
            \ ALL roles to be deleted and the ENTIRE collection to be cleared."
          items:
            $ref: "#/definitions/RoleInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified role(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    patch:
      tags:
      - "Roles"
      summary: "Modify or add the specified role(s)."
      description: "Modify or add the specified role(s).  Specify the role(s) to be\
        \ modified/added using role id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "rolesPATCH"
      parameters:
      - in: "body"
        name: "rolesPatch"
        description: "An array containing one or more partial role objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any roles by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial role objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any roles by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/RoleInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified roles were modified successfully.  The modified\
            \ roles are returned in the response body array.  The response array can\
            \ be filtered, sorted, and paged with query arg parameters as with the\
            \ GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new roles were added."
          schema:
            type: "array"
            description: "The specified roles were modified successfully.  The modified\
              \ roles are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new roles were added."
            items:
              $ref: "#/definitions/Role"
            minItems: 1
        201:
          description: "The specified roles were modified and/or added successfully.\
            \  The modified/added roles are returned in the response body array with\
            \ their assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ roles were new additions to the collection, not just modifications of\
            \ existing roles."
          schema:
            type: "array"
            description: "The specified roles were modified and/or added successfully.\
              \  The modified/added roles are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the roles were new additions to the collection, not just modifications\
              \ of existing roles."
            items:
              $ref: "#/definitions/Role"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
  /roles/{role}:
    get:
      tags:
      - "Roles"
      summary: "Get the specified role."
      description: "Get the specified role with its info."
      operationId: "rolesRoleGET"
      parameters:
      - name: "role"
        in: "path"
        description: "The ID or name of the target role.  If you are specifying the\
          \ role by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified role with its info."
          schema:
            $ref: "#/definitions/Role"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Roles"
    put:
      tags:
      - "Roles"
      summary: "Replace the specified role."
      description: "Replace the specified role."
      operationId: "rolesRolePUT"
      parameters:
      - name: "role"
        in: "path"
        description: "The ID or name of the target role.  If you are specifying the\
          \ role by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "rolePut"
        description: "A new role to replace the specified role."
        required: true
        schema:
          $ref: "#/definitions/RoleInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified role was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Role"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      summary: "Delete the specified role."
      description: "Delete the specified role."
      operationId: "rolesRoleDELETE"
      parameters:
      - name: "role"
        in: "path"
        description: "The ID or name of the target role.  If you are specifying the\
          \ role by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified role was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
    patch:
      tags:
      - "Roles"
      summary: "Modify the specified role."
      description: "Modify the specified role."
      operationId: "rolesRolePATCH"
      parameters:
      - name: "role"
        in: "path"
        description: "The ID or name of the target role.  If you are specifying the\
          \ role by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "rolePatch"
        description: "An object containing one or more fields to modify on the specified\
          \ role."
        required: true
        schema:
          $ref: "#/definitions/RoleInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified role was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Role"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Roles"
  /connections:
    get:
      tags:
      - "Connections"
      summary: "Get the collection of band connections (for example from shared members)."
      description: "Get the collection of band connections (for example from shared\
        \ members)."
      operationId: "connectionsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of connections with their\
            \ info."
          schema:
            $ref: "#/definitions/Connections"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Connections"
    post:
      tags:
      - "Connections"
      summary: "Submit a new connection or connections."
      description: "Submit a new connection or connections to the connections collection.\
        \  Connections must be submitted in an array, even if there is only one."
      operationId: "connectionsPOST"
      parameters:
      - in: "body"
        name: "connections"
        description: "An array containing one or more connections to add to the connections\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more connections to add to the\
            \ connections collection."
          items:
            $ref: "#/definitions/ConnectionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified connections were added successfully.  The newly\
            \ added connections are returned in the response body array with their\
            \ assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added connections with their\
              \ assigned IDs and links.  The array can be filtered, sorted, and paged\
              \ with query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Connection"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
    put:
      tags:
      - "Connections"
      summary: "Replace or add connection(s)."
      description: "Replace or add the specified connection(s).  Existing connections\
        \ can be specified in any of three ways: canonical id (like \"123-456\"),\
        \ name id (like \"band a-band b\", also supplied in the \"id\" field) or by\
        \ including either the id or name of both \"band1\" and \"band2\" fields in\
        \ the object.  The ordering of bands in any of the three methods does not\
        \ matter (that is, \"band a-band b\" will address the same connection as \"\
        band b-band a\").  Because of this, only a connection's description can be\
        \ replaced, not its bands.  The query args for this operation apply only to\
        \ the returned array confirming your changes."
      operationId: "connectionsPUT"
      parameters:
      - in: "body"
        name: "connectionPut"
        description: "An array containing one or more connections to replace or add.\
          \  Existing connections can be specified in any of three ways: canonical\
          \ id (like \"123-456\"), name id (like \"band a-band b\", also supplied\
          \ in the \"id\" field) or by including either the id or name of both \"\
          band1\" and \"band2\" fields in the object.  The ordering of bands in any\
          \ of the three methods does not matter (that is, \"band a-band b\" will\
          \ address the same connection as \"band b-band a\").  Because of this, only\
          \ a connection's description can be replaced, not its bands.  If you specify\
          \ a connection that is not found in the collection already, it will be added\
          \ instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more connections to replace or\
            \ add.  Existing connections can be specified in any of three ways: canonical\
            \ id (like \"123-456\"), name id (like \"band a-band b\", also supplied\
            \ in the \"id\" field) or by including either the id or name of both \"\
            band1\" and \"band2\" fields in the object.  The ordering of bands in\
            \ any of the three methods does not matter (that is, \"band a-band b\"\
            \ will address the same connection as \"band b-band a\").  Because of\
            \ this, only a connection's description can be replaced, not its bands.\
            \  If you specify a connection that is not found in the collection already,\
            \ it will be added instead of replaced."
          items:
            $ref: "#/definitions/ConnectionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified connection(s) were replaced successfully.  The\
            \ replaced connection(s) are returned in the response body array in their\
            \ new form.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired.  A 200 response\
            \ code specifically indicates that only replacements occurred - no new\
            \ connections were added."
          schema:
            type: "array"
            description: "The specified connection(s) were replaced successfully.\
              \  The replaced connection(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 200 response code specifically indicates that only replacements\
              \ occurred - no new connections were added."
            items:
              $ref: "#/definitions/Connection"
            minItems: 1
        201:
          description: "The specified connection(s) were replaced and/or added successfully.\
            \  The replaced/added connection(s) are returned in the response body\
            \ array in their new form.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ connections were new additions to the collection, not just replacements\
            \ of existing connections."
          schema:
            type: "array"
            description: "The specified connection(s) were replaced and/or added successfully.\
              \  The replaced/added connection(s) are returned in the response body\
              \ array in their new form.  The response array can be filtered, sorted,\
              \ and paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ connections were new additions to the collection, not just replacements\
              \ of existing connections."
            items:
              $ref: "#/definitions/Connection"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
    delete:
      tags:
      - "Connections"
      summary: "Delete specified connection(s)."
      description: "Delete specified connection(s).  Connections can be specified\
        \ in any of three ways in the request body array: canonical id (like \"123-456\"\
        ), name id (like \"band a-band b\", also supplied in the \"id\" field) or\
        \ by including either the id or name of both \"band1\" and \"band2\" fields\
        \ in the object.  They can also be specified in the \"ids\" query argument\
        \ by either of the first two ways.  The ordering of bands in any of the ways\
        \ does not matter (that is, \"band a-band b\" will address the same connection\
        \ as \"band b-band a\")."
      operationId: "connectionsDELETE"
      parameters:
      - in: "body"
        name: "connectionsDelete"
        description: "An array specifying which connections to delete.  Connections\
          \ can be specified in any of three ways: canonical id (like \"123-456\"\
          ), name id (like \"band a-band b\", also supplied in the \"id\" field) or\
          \ by including either the id or name of both \"band1\" and \"band2\" fields\
          \ in the object.  The ordering of bands in any of the three ways does not\
          \ matter (that is, \"band a-band b\" will address the same connection as\
          \ \"band b-band a\").  Use either this request body or the provided query\
          \ args to select which connections you want to delete.  WARNING: A DELETE\
          \ call to this URI with no particular connections specified will cause ALL\
          \ connections to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array specifying which connections to delete.  Connections\
            \ can be specified in any of three ways: canonical id (like \"123-456\"\
            ), name id (like \"band a-band b\", also supplied in the \"id\" field)\
            \ or by including either the id or name of both \"band1\" and \"band2\"\
            \ fields in the object.  The ordering of bands in any of the three ways\
            \ does not matter (that is, \"band a-band b\" will address the same connection\
            \ as \"band b-band a\").  Use either this request body or the provided\
            \ query args to select which connections you want to delete.  WARNING:\
            \ A DELETE call to this URI with no particular connections specified will\
            \ cause ALL connections to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/ConnectionInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified connection(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
    patch:
      tags:
      - "Connections"
      summary: "Modify or add the specified connection(s)."
      description: "Modify or add the specified connection(s).  Existing connections\
        \ can be specified in any of three ways: canonical id (like \"123-456\"),\
        \ name id (like \"band a-band b\", also supplied in the \"id\" field) or by\
        \ including either the id or name of both \"band1\" and \"band2\" fields in\
        \ the object.  The ordering of bands in any of the three methods does not\
        \ matter (that is, \"band a-band b\" will address the same connection as \"\
        band b-band a\").  Only a connection's description can be modified, not its\
        \ bands.  The query args for this operation apply only to the returned array\
        \ confirming your changes."
      operationId: "connectionsPATCH"
      parameters:
      - in: "body"
        name: "connectionsPatch"
        description: "An array containing one or more existing or new connections.\
          \  Existing connections can be specified in any of three ways: canonical\
          \ id (like \"123-456\"), name id (like \"band a-band b\", also supplied\
          \ in the \"id\" field) or by including either the id or name of both \"\
          band1\" and \"band2\" fields in the object.  The ordering of bands in any\
          \ of the three methods does not matter (that is, \"band a-band b\" will\
          \ address the same connection as \"band b-band a\").  Only a connection's\
          \ description can be modified, not its bands."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more existing or new connections.\
            \  Existing connections can be specified in any of three ways: canonical\
            \ id (like \"123-456\"), name id (like \"band a-band b\", also supplied\
            \ in the \"id\" field) or by including either the id or name of both \"\
            band1\" and \"band2\" fields in the object.  The ordering of bands in\
            \ any of the three methods does not matter (that is, \"band a-band b\"\
            \ will address the same connection as \"band b-band a\").  Only a connection's\
            \ description can be modified, not its bands."
          items:
            $ref: "#/definitions/ConnectionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified connection(s) were modified successfully.  The\
            \ modified connection(s) are returned in the response body array.  The\
            \ response array can be filtered, sorted, and paged with query arg parameters\
            \ as with the GET response, if desired.  A 200 response code specifically\
            \ indicates that only modifications occurred - no new connection(s) were\
            \ added."
          schema:
            type: "array"
            description: "The specified connection(s) were modified successfully.\
              \  The modified connection(s) are returned in the response body array.\
              \  The response array can be filtered, sorted, and paged with query\
              \ arg parameters as with the GET response, if desired.  A 200 response\
              \ code specifically indicates that only modifications occurred - no\
              \ new connection(s) were added."
            items:
              $ref: "#/definitions/Connection"
            minItems: 1
        201:
          description: "The specified connection(s) were modified and/or added successfully.\
            \  The modified/added connection(s) are returned in the response body\
            \ array with their assigned IDs and links.  The response array can be\
            \ filtered, sorted, and paged with query arg parameters as with the GET\
            \ response, if desired.  A 201 response code specifically indicates that\
            \ one or more of the connections were new additions to the collection,\
            \ not just modifications of existing connections."
          schema:
            type: "array"
            description: "The specified connection(s) were modified and/or added successfully.\
              \  The modified/added connection(s) are returned in the response body\
              \ array with their assigned IDs and links.  The response array can be\
              \ filtered, sorted, and paged with query arg parameters as with the\
              \ GET response, if desired.  A 201 response code specifically indicates\
              \ that one or more of the connections were new additions to the collection,\
              \ not just modifications of existing connections."
            items:
              $ref: "#/definitions/Connection"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
  /connections/{connection}:
    get:
      tags:
      - "Connections"
      summary: "Get the specified connection."
      description: "Get the specified connection."
      operationId: "connectionsConnectionGET"
      parameters:
      - name: "connection"
        in: "path"
        description: "A specification of the target connection.  In the URL, a connection\
          \ can be specified in either of two ways: canonical id (like \"123-456\"\
          ), or name id (like \"band a-band b\").  The ordering of bands in either\
          \ way does not matter (that is, \"band a-band b\" will address the same\
          \ connection as \"band b-band a\").  If you are specifying bands by name,\
          \ preserve any spaces between words in the name in the URL - they will be\
          \ processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified connection."
          schema:
            $ref: "#/definitions/Connection"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Connections"
    put:
      tags:
      - "Connections"
      summary: "Replace the specified connection."
      description: "Replace the specified connection."
      operationId: "connectionsConnectionPUT"
      parameters:
      - name: "connection"
        in: "path"
        description: "A specification of the target connection.  In the URL, a connection\
          \ can be specified in either of two ways: canonical id (like \"123-456\"\
          ), or name id (like \"band a-band b\").  The ordering of bands in either\
          \ way does not matter (that is, \"band a-band b\" will address the same\
          \ connection as \"band b-band a\").  If you are specifying bands by name,\
          \ preserve any spaces between words in the name in the URL - they will be\
          \ processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "connectionPut"
        description: "A new connection to replace the specified connection.  Only\
          \ the \"description\" field can differ from the old one."
        required: true
        schema:
          $ref: "#/definitions/ConnectionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified connection was replaced successfully  It is\
            \ returned in its new form in the response body.  The response fields\
            \ can be filtered or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Connection"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
    delete:
      tags:
      - "Connections"
      summary: "Delete the specified connection."
      description: "Delete the specified connection."
      operationId: "connectionsConnectionDELETE"
      parameters:
      - name: "connection"
        in: "path"
        description: "A specification of the target connection.  In the URL, a connection\
          \ can be specified in either of two ways: canonical id (like \"123-456\"\
          ), or name id (like \"band a-band b\").  The ordering of bands in either\
          \ way does not matter (that is, \"band a-band b\" will address the same\
          \ connection as \"band b-band a\").  If you are specifying bands by name,\
          \ preserve any spaces between words in the name in the URL - they will be\
          \ processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified connection was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
    patch:
      tags:
      - "Connections"
      summary: "Modify the specified connection."
      description: "Modify the specified connection."
      operationId: "connectionsConnectionPATCH"
      parameters:
      - name: "connection"
        in: "path"
        description: "A specification of the target connection.  In the URL, a connection\
          \ can be specified in either of two ways: canonical id (like \"123-456\"\
          ), or name id (like \"band a-band b\").  The ordering of bands in either\
          \ way does not matter (that is, \"band a-band b\" will address the same\
          \ connection as \"band b-band a\").  If you are specifying bands by name,\
          \ preserve any spaces between words in the name in the URL - they will be\
          \ processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "connectionPatch"
        description: "An object containing the field to modify.  Only a connection's\
          \ \"description\" field can be modified."
        required: true
        schema:
          $ref: "#/definitions/ConnectionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified connection was modified successfully.  It is\
            \ returned in its new form in the response body.  The response fields\
            \ can be filtered or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Connection"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Connections"
  /locations/cities:
    get:
      tags:
      - "Locations"
      summary: "Get the collection of cities."
      description: "Get the collection of cities."
      operationId: "locationsCitiesGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of cities with their info."
          schema:
            $ref: "#/definitions/Cities"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    post:
      tags:
      - "Locations"
      summary: "Submit a new city or cities."
      description: "Submit a new city or cities to the cities collection.  Cities\
        \ must be submitted in an array, even if there is only one."
      operationId: "locationsCitiesPOST"
      parameters:
      - in: "body"
        name: "cities"
        description: "An array containing one or more cities to add to the cities\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more cities to add to the cities\
            \ collection."
          items:
            $ref: "#/definitions/CityInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified cities were added successfully.  The newly added\
            \ cities are returned in the response body array with their assigned IDs\
            \ and links.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added cities with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/City"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace or add the specified city(s)."
      description: "Replace or add the specified city(s).  Specify the city(s) to\
        \ be replaced/added using city id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsCitiesPUT"
      parameters:
      - in: "body"
        name: "citiesPut"
        description: "An array containing one or more cities specified by id or name.\
          \  If you specify a city by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more cities specified by id or\
            \ name.  If you specify a city by name that is not found in the collection\
            \ already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/CityInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified city(s) were replaced successfully.  The replaced\
            \ city(s) are returned in the response body array in their new form. \
            \ The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new cities\
            \ were added."
          schema:
            type: "array"
            description: "The specified city(s) were replaced successfully.  The replaced\
              \ city(s) are returned in the response body array in their new form.\
              \  The response array can be filtered, sorted, and paged with query\
              \ arg parameters as with the GET response, if desired.  A 200 response\
              \ code specifically indicates that only replacements occurred - no new\
              \ cities were added."
            items:
              $ref: "#/definitions/City"
            minItems: 1
        201:
          description: "The specified city(s) were replaced and/or added successfully.\
            \  The replaced/added city(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ cities were new additions to the collection, not just replacements of\
            \ existing cities."
          schema:
            type: "array"
            description: "The specified city(s) were replaced and/or added successfully.\
              \  The replaced/added city(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ cities were new additions to the collection, not just replacements\
              \ of existing cities."
            items:
              $ref: "#/definitions/City"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete specified city(s)."
      description: "Delete specified city(s)."
      operationId: "locationsCitiesDELETE"
      parameters:
      - in: "body"
        name: "citiesDelete"
        description: "An array containing the IDs or names of one or more cities to\
          \ delete from the cities collection.  Use either this request body or the\
          \ provided query args to select which cities you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular cities specified will cause\
          \ ALL cities to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more cities\
            \ to delete from the cities collection.  Use either this request body\
            \ or the provided query args to select which cities you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular cities specified\
            \ will cause ALL cities to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/CityInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified city(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify or add the specified city(s)."
      description: "Modify or add the specified city(s).  Specify the city(s) to be\
        \ modified/added using city id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsCitiesPATCH"
      parameters:
      - in: "body"
        name: "citiesPatch"
        description: "An array containing one or more partial city objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any cities by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial city objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any cities by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/CityInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified cities were modified successfully.  The modified\
            \ cities are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new cities were added."
          schema:
            type: "array"
            description: "The specified cities were modified successfully.  The modified\
              \ cities are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new cities were added."
            items:
              $ref: "#/definitions/City"
            minItems: 1
        201:
          description: "The specified cities were modified and/or added successfully.\
            \  The modified/added cities are returned in the response body array with\
            \ their assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ cities were new additions to the collection, not just modifications\
            \ of existing cities."
          schema:
            type: "array"
            description: "The specified cities were modified and/or added successfully.\
              \  The modified/added cities are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the cities were new additions to the collection, not just\
              \ modifications of existing cities."
            items:
              $ref: "#/definitions/City"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/cities/{city}:
    get:
      tags:
      - "Locations"
      summary: "Get the specified city."
      description: "Get the specified city with its info."
      operationId: "locationsCitiesCityGET"
      parameters:
      - name: "city"
        in: "path"
        description: "The ID or name of the target city.  If you are specifying the\
          \ city by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified city with its info."
          schema:
            $ref: "#/definitions/City"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace the specified city."
      description: "Replace the specified city."
      operationId: "locationsCitiesCityPUT"
      parameters:
      - name: "city"
        in: "path"
        description: "The ID or name of the target city.  If you are specifying the\
          \ city by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "cityPut"
        description: "A new city to replace the specified city."
        required: true
        schema:
          $ref: "#/definitions/CityInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified city was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/City"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete the specified city."
      description: "Delete the specified city."
      operationId: "locationsCitiesCityDELETE"
      parameters:
      - name: "city"
        in: "path"
        description: "The ID or name of the target city.  If you are specifying the\
          \ city by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified city was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify the specified city."
      description: "Modify the specified city."
      operationId: "locationsCitiesCityPATCH"
      parameters:
      - name: "city"
        in: "path"
        description: "The ID or name of the target city.  If you are specifying the\
          \ city by name, preserve any spaces between words in the name in the URL\
          \ - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "cityPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ city."
        required: true
        schema:
          $ref: "#/definitions/CityInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified city was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/City"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/states:
    get:
      tags:
      - "Locations"
      summary: "Get the collection of states, provinces, prefectures, or other administrative\
        \ areas."
      description: "Get the collection of states, provinces, prefectures, or other\
        \ administrative areas."
      operationId: "locationsStatesGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of states/provinces/prefectures\
            \ with their info."
          schema:
            $ref: "#/definitions/States"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    post:
      tags:
      - "Locations"
      summary: "Submit one or more new states/provinces/prefectures."
      description: "Submit one or more new states/provinces/prefectures to the states\
        \ collection.  They must be submitted in an array, even if there is only one."
      operationId: "locationsStatesPOST"
      parameters:
      - in: "body"
        name: "states"
        description: "An array containing one or more states/provinces/prefectures\
          \ to add to the states collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more states/provinces/prefectures\
            \ to add to the states collection."
          items:
            $ref: "#/definitions/StateInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified states were added successfully.  The newly added\
            \ states are returned in the response body array with their assigned IDs\
            \ and links.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added states with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/State"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace or add the specified state(s)."
      description: "Replace or add the specified state(s).  Specify the state(s) to\
        \ be replaced/added using state id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsStatesPUT"
      parameters:
      - in: "body"
        name: "statesPut"
        description: "An array containing one or more states specified by id or name.\
          \  If you specify a state by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more states specified by id or\
            \ name.  If you specify a state by name that is not found in the collection\
            \ already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/StateInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified state(s) were replaced successfully.  The replaced\
            \ state(s) are returned in the response body array in their new form.\
            \  The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new states\
            \ were added."
          schema:
            type: "array"
            description: "The specified state(s) were replaced successfully.  The\
              \ replaced state(s) are returned in the response body array in their\
              \ new form.  The response array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired.  A 200\
              \ response code specifically indicates that only replacements occurred\
              \ - no new states were added."
            items:
              $ref: "#/definitions/State"
            minItems: 1
        201:
          description: "The specified state(s) were replaced and/or added successfully.\
            \  The replaced/added state(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ states were new additions to the collection, not just replacements of\
            \ existing states."
          schema:
            type: "array"
            description: "The specified state(s) were replaced and/or added successfully.\
              \  The replaced/added state(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ states were new additions to the collection, not just replacements\
              \ of existing states."
            items:
              $ref: "#/definitions/State"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete specified state(s)."
      description: "Delete specified state(s)."
      operationId: "locationsStatesDELETE"
      parameters:
      - in: "body"
        name: "statesDelete"
        description: "An array containing the IDs or names of one or more states to\
          \ delete from the states collection.  Use either this request body or the\
          \ provided query args to select which states you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular states specified will cause\
          \ ALL states to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more states\
            \ to delete from the states collection.  Use either this request body\
            \ or the provided query args to select which states you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular states specified\
            \ will cause ALL states to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/StateInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified state(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify or add the specified state(s)."
      description: "Modify or add the specified state(s).  Specify the state(s) to\
        \ be modified/added using state id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsStatesPATCH"
      parameters:
      - in: "body"
        name: "statesPatch"
        description: "An array containing one or more partial state objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any states by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial state objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any states by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/StateInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified states were modified successfully.  The modified\
            \ states are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new states were added."
          schema:
            type: "array"
            description: "The specified states were modified successfully.  The modified\
              \ states are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new states were added."
            items:
              $ref: "#/definitions/State"
            minItems: 1
        201:
          description: "The specified states were modified and/or added successfully.\
            \  The modified/added states are returned in the response body array with\
            \ their assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ states were new additions to the collection, not just modifications\
            \ of existing states."
          schema:
            type: "array"
            description: "The specified states were modified and/or added successfully.\
              \  The modified/added states are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the states were new additions to the collection, not just\
              \ modifications of existing states."
            items:
              $ref: "#/definitions/State"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/states/{state}:
    get:
      tags:
      - "Locations"
      summary: "Get the specified state/province/prefecture."
      description: "Get the specified state/province/prefecture with its info."
      operationId: "locationsStatesStateGET"
      parameters:
      - name: "state"
        in: "path"
        description: "The ID or name of the target state/province/prefecture (state\
          \ names are typically abbreviated, like \"WA\" for \"Washington\").  If\
          \ you are specifying by name, preserve any spaces between words in the name\
          \ in the URL - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified state/province/prefecture\
            \ with its info."
          schema:
            $ref: "#/definitions/State"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace the specified state/province/prefecture."
      description: "Replace the specified state/province/prefecture."
      operationId: "locationsStatesStatePUT"
      parameters:
      - name: "state"
        in: "path"
        description: "The ID or name of the target state/province/prefecture (state\
          \ names are typically abbreviated, like \"WA\" for \"Washington\").  If\
          \ you are specifying by name, preserve any spaces between words in the name\
          \ in the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "statePut"
        description: "A new state to replace the specified state."
        required: true
        schema:
          $ref: "#/definitions/StateInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified state was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/State"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete the specified state/province/prefecture."
      description: "Delete the specified state/province/prefecture."
      operationId: "locationsStatesStateDELETE"
      parameters:
      - name: "state"
        in: "path"
        description: "The ID or name of the target state/province/prefecture (state\
          \ names are typically abbreviated, like \"WA\" for \"Washington\").  If\
          \ you are specifying by name, preserve any spaces between words in the name\
          \ in the URL - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified state was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify the specified state/province/prefecture."
      description: "Modify the specified state/province/prefecture."
      operationId: "locationsStatesStatePATCH"
      parameters:
      - name: "state"
        in: "path"
        description: "The ID or name of the target state/province/prefecture (state\
          \ names are typically abbreviated, like \"WA\" for \"Washington\").  If\
          \ you are specifying by name, preserve any spaces between words in the name\
          \ in the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "statePatch"
        description: "An object containing one or more fields to modify on the specified\
          \ state."
        required: true
        schema:
          $ref: "#/definitions/StateInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified state was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/State"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/countries:
    get:
      tags:
      - "Locations"
      summary: "Get the collection of countries."
      description: "Get the collection of countries."
      operationId: "locationsCountriesGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of countries with their info."
          schema:
            $ref: "#/definitions/Countries"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    post:
      tags:
      - "Locations"
      summary: "Submit a new country or countries."
      description: "Submit a new country or countries to the countries collection.\
        \  Countries must be submitted in an array, even if there is only one."
      operationId: "locationsCountriesPOST"
      parameters:
      - in: "body"
        name: "countries"
        description: "An array containing one or more countries to add to the countries\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more countries to add to the countries\
            \ collection."
          items:
            $ref: "#/definitions/CountryInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified countries were added successfully.  The newly\
            \ added countries are returned in the response body array with their assigned\
            \ IDs and links.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added countries with their\
              \ assigned IDs and links.  The array can be filtered, sorted, and paged\
              \ with query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Country"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace or add the specified country(s)."
      description: "Replace or add the specified country(s).  Specify the country(s)\
        \ to be replaced/added using country id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "locationsCountriesPUT"
      parameters:
      - in: "body"
        name: "countriesPut"
        description: "An array containing one or more countries specified by id or\
          \ name.  If you specify a country by name that is not found in the collection\
          \ already, it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more countries specified by id\
            \ or name.  If you specify a country by name that is not found in the\
            \ collection already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/CountryInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified country(s) were replaced successfully.  The\
            \ replaced country(s) are returned in the response body array in their\
            \ new form.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired.  A 200 response\
            \ code specifically indicates that only replacements occurred - no new\
            \ countries were added."
          schema:
            type: "array"
            description: "The specified country(s) were replaced successfully.  The\
              \ replaced country(s) are returned in the response body array in their\
              \ new form.  The response array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired.  A 200\
              \ response code specifically indicates that only replacements occurred\
              \ - no new countries were added."
            items:
              $ref: "#/definitions/Country"
            minItems: 1
        201:
          description: "The specified country(s) were replaced and/or added successfully.\
            \  The replaced/added country(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ countries were new additions to the collection, not just replacements\
            \ of existing countries."
          schema:
            type: "array"
            description: "The specified country(s) were replaced and/or added successfully.\
              \  The replaced/added country(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ countries were new additions to the collection, not just replacements\
              \ of existing countries."
            items:
              $ref: "#/definitions/Country"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete specified country(s)."
      description: "Delete specified country(s)."
      operationId: "locationsCountriesDELETE"
      parameters:
      - in: "body"
        name: "countriesDelete"
        description: "An array containing the IDs or names of one or more countries\
          \ to delete from the countries collection.  Use either this request body\
          \ or the provided query args to select which countries you want to delete.\
          \  WARNING: A DELETE call to this URI with no particular countries specified\
          \ will cause ALL countries to be deleted and the ENTIRE collection to be\
          \ cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more countries\
            \ to delete from the countries collection.  Use either this request body\
            \ or the provided query args to select which countries you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular countries specified\
            \ will cause ALL countries to be deleted and the ENTIRE collection to\
            \ be cleared."
          items:
            $ref: "#/definitions/CountryInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified country(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify or add the specified country(s)."
      description: "Modify or add the specified country(s).  Specify the country(s)\
        \ to be modified/added using country id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "locationsCountriesPATCH"
      parameters:
      - in: "body"
        name: "countriesPatch"
        description: "An array containing one or more partial country objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any countries by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial country objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any countries by name that are not found in\
            \ the collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/CountryInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified countries were modified successfully.  The modified\
            \ countries are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new countries were added."
          schema:
            type: "array"
            description: "The specified countries were modified successfully.  The\
              \ modified countries are returned in the response body array.  The response\
              \ array can be filtered, sorted, and paged with query arg parameters\
              \ as with the GET response, if desired.  A 200 response code specifically\
              \ indicates that only modifications occurred - no new countries were\
              \ added."
            items:
              $ref: "#/definitions/Country"
            minItems: 1
        201:
          description: "The specified countries were modified and/or added successfully.\
            \  The modified/added countries are returned in the response body array\
            \ with their assigned IDs and links.  The response array can be filtered,\
            \ sorted, and paged with query arg parameters as with the GET response,\
            \ if desired.  A 201 response code specifically indicates that one or\
            \ more of the countries were new additions to the collection, not just\
            \ modifications of existing countries."
          schema:
            type: "array"
            description: "The specified countries were modified and/or added successfully.\
              \  The modified/added countries are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the countries were new additions to the collection, not just\
              \ modifications of existing countries."
            items:
              $ref: "#/definitions/Country"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/countries/{country}:
    get:
      tags:
      - "Locations"
      summary: "Get the specified country."
      description: "Get the specified country with its info."
      operationId: "locationsCountriesCountryGET"
      parameters:
      - name: "country"
        in: "path"
        description: "The ID or name of the target country.  If you are specifying\
          \ the country by name, preserve any spaces between words in the name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified country with its info."
          schema:
            $ref: "#/definitions/Country"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace the specified country."
      description: "Replace the specified country."
      operationId: "locationsCountriesCountryPUT"
      parameters:
      - name: "country"
        in: "path"
        description: "The ID or name of the target country.  If you are specifying\
          \ the country by name, preserve any spaces between words in the name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "countryPut"
        description: "A new country to replace the specified country."
        required: true
        schema:
          $ref: "#/definitions/CountryInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified country was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Country"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete the specified country."
      description: "Delete the specified country."
      operationId: "locationsCountriesCountryDELETE"
      parameters:
      - name: "country"
        in: "path"
        description: "The ID or name of the target country.  If you are specifying\
          \ the country by name, preserve any spaces between words in the name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified country was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify the specified country."
      description: "Modify the specified country."
      operationId: "locationsCountriesCountryPATCH"
      parameters:
      - name: "country"
        in: "path"
        description: "The ID or name of the target country.  If you are specifying\
          \ the country by name, preserve any spaces between words in the name in\
          \ the URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "countryPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ country."
        required: true
        schema:
          $ref: "#/definitions/CountryInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified country was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Country"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/regions:
    get:
      tags:
      - "Locations"
      summary: "Get the collection of regions."
      description: "Get the collection of regions."
      operationId: "locationsRegionsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of regions with their info."
          schema:
            $ref: "#/definitions/Regions"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    post:
      tags:
      - "Locations"
      summary: "Submit a new region or regions."
      description: "Submit a new region or regions to the regions collection.  Regions\
        \ must be submitted in an array, even if there is only one."
      operationId: "locationsRegionsPOST"
      parameters:
      - in: "body"
        name: "regions"
        description: "An array containing one or more regions to add to the regions\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more regions to add to the regions\
            \ collection."
          items:
            $ref: "#/definitions/RegionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified regions were added successfully.  The newly\
            \ added regions are returned in the response body array with their assigned\
            \ IDs and links.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added regions with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Region"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace or add the specified region(s)."
      description: "Replace or add the specified region(s).  Specify the region(s)\
        \ to be replaced/added using region id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsRegionsPUT"
      parameters:
      - in: "body"
        name: "regionsPut"
        description: "An array containing one or more regions specified by id or name.\
          \  If you specify a region by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more regions specified by id or\
            \ name.  If you specify a region by name that is not found in the collection\
            \ already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/RegionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified region(s) were replaced successfully.  The replaced\
            \ region(s) are returned in the response body array in their new form.\
            \  The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new regions\
            \ were added."
          schema:
            type: "array"
            description: "The specified region(s) were replaced successfully.  The\
              \ replaced region(s) are returned in the response body array in their\
              \ new form.  The response array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired.  A 200\
              \ response code specifically indicates that only replacements occurred\
              \ - no new regions were added."
            items:
              $ref: "#/definitions/Region"
            minItems: 1
        201:
          description: "The specified region(s) were replaced and/or added successfully.\
            \  The replaced/added region(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ regions were new additions to the collection, not just replacements\
            \ of existing regions."
          schema:
            type: "array"
            description: "The specified region(s) were replaced and/or added successfully.\
              \  The replaced/added region(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ regions were new additions to the collection, not just replacements\
              \ of existing regions."
            items:
              $ref: "#/definitions/Region"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete specified region(s)."
      description: "Delete specified region(s)."
      operationId: "locationsRegionsDELETE"
      parameters:
      - in: "body"
        name: "regionsDelete"
        description: "An array containing the IDs or names of one or more regions\
          \ to delete from the regions collection.  Use either this request body or\
          \ the provided query args to select which regions you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular regions specified will cause\
          \ ALL regions to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more regions\
            \ to delete from the regions collection.  Use either this request body\
            \ or the provided query args to select which regions you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular regions specified\
            \ will cause ALL regions to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/RegionInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified region(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify or add the specified region(s)."
      description: "Modify or add the specified region(s).  Specify the region(s)\
        \ to be modified/added using region id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "locationsRegionsPATCH"
      parameters:
      - in: "body"
        name: "regionsPatch"
        description: "An array containing one or more partial region objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any regions by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial region objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any regions by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/RegionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified regions were modified successfully.  The modified\
            \ regions are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new regions were added."
          schema:
            type: "array"
            description: "The specified regions were modified successfully.  The modified\
              \ regions are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new regions were added."
            items:
              $ref: "#/definitions/Region"
            minItems: 1
        201:
          description: "The specified regions were modified and/or added successfully.\
            \  The modified/added regions are returned in the response body array\
            \ with their assigned IDs and links.  The response array can be filtered,\
            \ sorted, and paged with query arg parameters as with the GET response,\
            \ if desired.  A 201 response code specifically indicates that one or\
            \ more of the regions were new additions to the collection, not just modifications\
            \ of existing regions."
          schema:
            type: "array"
            description: "The specified regions were modified and/or added successfully.\
              \  The modified/added regions are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the regions were new additions to the collection, not just\
              \ modifications of existing regions."
            items:
              $ref: "#/definitions/Region"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /locations/regions/{region}:
    get:
      tags:
      - "Locations"
      summary: "Get the specified region."
      description: "Get the specified region with its info."
      operationId: "locationsRegionsRegionGET"
      parameters:
      - name: "region"
        in: "path"
        description: "The ID or name of the target region.  If you are specifying\
          \ the region by name, preserve any spaces between words in the name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified region with its info."
          schema:
            $ref: "#/definitions/Region"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Locations"
    put:
      tags:
      - "Locations"
      summary: "Replace the specified region."
      description: "Replace the specified region."
      operationId: "locationsRegionsRegionPUT"
      parameters:
      - name: "region"
        in: "path"
        description: "The ID or name of the target region.  If you are specifying\
          \ the region by name, preserve any spaces between words in the name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "regionPut"
        description: "A new region to replace the specified region."
        required: true
        schema:
          $ref: "#/definitions/RegionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified region was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Region"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    delete:
      tags:
      - "Locations"
      summary: "Delete the specified region."
      description: "Delete the specified region."
      operationId: "locationsRegionsRegionDELETE"
      parameters:
      - name: "region"
        in: "path"
        description: "The ID or name of the target region.  If you are specifying\
          \ the region by name, preserve any spaces between words in the name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified region was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
    patch:
      tags:
      - "Locations"
      summary: "Modify the specified region."
      description: "Modify the specified region."
      operationId: "locationsRegionsRegionPATCH"
      parameters:
      - name: "region"
        in: "path"
        description: "The ID or name of the target region.  If you are specifying\
          \ the region by name, preserve any spaces between words in the name in the\
          \ URL - they will be processed normally."
        required: true
        type: "string"
      - in: "body"
        name: "regionPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ region."
        required: true
        schema:
          $ref: "#/definitions/RegionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified region was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Region"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Locations"
  /admin/accounts:
    get:
      tags:
      - "Admin"
      summary: "Get the collection of Band Map user accounts."
      description: "Get the collection of Band Map user accounts."
      operationId: "adminAccountsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of accounts with their info."
          schema:
            $ref: "#/definitions/Accounts"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    post:
      tags:
      - "Admin"
      summary: "Submit a new account or accounts."
      description: "Submit a new account or accounts to the accounts collection. \
        \ Accounts must be submitted in an array, even if there is only one."
      operationId: "adminAccountsPOST"
      parameters:
      - in: "body"
        name: "accounts"
        description: "An array containing one or more accounts to add to the accounts\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more accounts to add to the accounts\
            \ collection."
          items:
            $ref: "#/definitions/AccountInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified accounts were added successfully.  The newly\
            \ added accounts are returned in the response body array with their assigned\
            \ IDs and links.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added accounts with their\
              \ assigned IDs and links.  The array can be filtered, sorted, and paged\
              \ with query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Account"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace or add the specified account(s)."
      description: "Replace or add the specified account(s).  Specify the account(s)\
        \ to be replaced/added using account id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "adminAccountsPUT"
      parameters:
      - in: "body"
        name: "accountsPut"
        description: "An array containing one or more accounts specified by id or\
          \ name.  If you specify a account by name that is not found in the collection\
          \ already, it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more accounts specified by id or\
            \ name.  If you specify a account by name that is not found in the collection\
            \ already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/AccountInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified account(s) were replaced successfully.  The\
            \ replaced account(s) are returned in the response body array in their\
            \ new form.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired.  A 200 response\
            \ code specifically indicates that only replacements occurred - no new\
            \ accounts were added."
          schema:
            type: "array"
            description: "The specified account(s) were replaced successfully.  The\
              \ replaced account(s) are returned in the response body array in their\
              \ new form.  The response array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired.  A 200\
              \ response code specifically indicates that only replacements occurred\
              \ - no new accounts were added."
            items:
              $ref: "#/definitions/Account"
            minItems: 1
        201:
          description: "The specified account(s) were replaced and/or added successfully.\
            \  The replaced/added account(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ accounts were new additions to the collection, not just replacements\
            \ of existing accounts."
          schema:
            type: "array"
            description: "The specified account(s) were replaced and/or added successfully.\
              \  The replaced/added account(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ accounts were new additions to the collection, not just replacements\
              \ of existing accounts."
            items:
              $ref: "#/definitions/Account"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete specified account(s)."
      description: "Delete specified account(s)."
      operationId: "adminAccountsDELETE"
      parameters:
      - in: "body"
        name: "accountsDelete"
        description: "An array containing the IDs or names of one or more accounts\
          \ to delete from the accounts collection.  Use either this request body\
          \ or the provided query args to select which accounts you want to delete.\
          \  WARNING: A DELETE call to this URI with no particular accounts specified\
          \ will cause ALL accounts to be deleted and the ENTIRE collection to be\
          \ cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more accounts\
            \ to delete from the accounts collection.  Use either this request body\
            \ or the provided query args to select which accounts you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular accounts specified\
            \ will cause ALL accounts to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/AccountInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified account(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify or add the specified account(s)."
      description: "Modify or add the specified account(s).  Specify the account(s)\
        \ to be modified/added using account id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "adminAccountsPATCH"
      parameters:
      - in: "body"
        name: "accountsPatch"
        description: "An array containing one or more partial account objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any accounts by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial account objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any accounts by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/AccountInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified accounts were modified successfully.  The modified\
            \ accounts are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new accounts were added."
          schema:
            type: "array"
            description: "The specified accounts were modified successfully.  The\
              \ modified accounts are returned in the response body array.  The response\
              \ array can be filtered, sorted, and paged with query arg parameters\
              \ as with the GET response, if desired.  A 200 response code specifically\
              \ indicates that only modifications occurred - no new accounts were\
              \ added."
            items:
              $ref: "#/definitions/Account"
            minItems: 1
        201:
          description: "The specified accounts were modified and/or added successfully.\
            \  The modified/added accounts are returned in the response body array\
            \ with their assigned IDs and links.  The response array can be filtered,\
            \ sorted, and paged with query arg parameters as with the GET response,\
            \ if desired.  A 201 response code specifically indicates that one or\
            \ more of the accounts were new additions to the collection, not just\
            \ modifications of existing accounts."
          schema:
            type: "array"
            description: "The specified accounts were modified and/or added successfully.\
              \  The modified/added accounts are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the accounts were new additions to the collection, not just\
              \ modifications of existing accounts."
            items:
              $ref: "#/definitions/Account"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
  /admin/accounts/{account}:
    get:
      tags:
      - "Admin"
      summary: "Get the specified account."
      description: "Get the specified account with its info."
      operationId: "adminAccountsAccountGET"
      parameters:
      - name: "account"
        in: "path"
        description: "The ID or username of the target account."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified account with its info."
          schema:
            $ref: "#/definitions/Account"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace the specified account."
      description: "Replace the specified account."
      operationId: "adminAccountsAccountPUT"
      parameters:
      - name: "account"
        in: "path"
        description: "The ID or username of the target account."
        required: true
        type: "string"
      - in: "body"
        name: "accountPut"
        description: "A new account to replace the specified account."
        required: true
        schema:
          $ref: "#/definitions/AccountInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified account was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Account"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete the specified account."
      description: "Delete the specified account."
      operationId: "adminAccountsAccountDELETE"
      parameters:
      - name: "account"
        in: "path"
        description: "The ID or username of the target account."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified account was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify the specified account."
      description: "Modify the specified account."
      operationId: "adminAccountsAccountPATCH"
      parameters:
      - name: "account"
        in: "path"
        description: "The ID or username of the target account."
        required: true
        type: "string"
      - in: "body"
        name: "accountPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ account."
        required: true
        schema:
          $ref: "#/definitions/AccountInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified account was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Account"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
  /admin/sessions:
    get:
      tags:
      - "Admin"
      summary: "Get the collection of app sessions."
      description: "Get the collection of app sessions."
      operationId: "adminSessionsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of sessions with their info."
          schema:
            $ref: "#/definitions/Sessions"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    post:
      tags:
      - "Admin"
      summary: "Submit a new session or sessions."
      description: "Submit a new session or sessions to the sessions collection. \
        \ Sessions must be submitted in an array, even if there is only one."
      operationId: "adminSessionsPOST"
      parameters:
      - in: "body"
        name: "sessions"
        description: "An array containing one or more sessions to add to the sessions\
          \ collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more sessions to add to the sessions\
            \ collection."
          items:
            $ref: "#/definitions/SessionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified sessions were added successfully.  The newly\
            \ added sessions are returned in the response body array with their assigned\
            \ IDs and links.  The response array can be filtered, sorted, and paged\
            \ with query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added sessions with their\
              \ assigned IDs and links.  The array can be filtered, sorted, and paged\
              \ with query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Session"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace or add the specified session(s)."
      description: "Replace or add the specified session(s).  Specify the session(s)\
        \ to be replaced/added using session id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "adminSessionsPUT"
      parameters:
      - in: "body"
        name: "sessionsPut"
        description: "An array containing one or more sessions specified by id or\
          \ name.  If you specify a session by name that is not found in the collection\
          \ already, it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more sessions specified by id or\
            \ name.  If you specify a session by name that is not found in the collection\
            \ already, it will be added instead of replaced."
          items:
            $ref: "#/definitions/SessionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified session(s) were replaced successfully.  The\
            \ replaced session(s) are returned in the response body array in their\
            \ new form.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired.  A 200 response\
            \ code specifically indicates that only replacements occurred - no new\
            \ sessions were added."
          schema:
            type: "array"
            description: "The specified session(s) were replaced successfully.  The\
              \ replaced session(s) are returned in the response body array in their\
              \ new form.  The response array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired.  A 200\
              \ response code specifically indicates that only replacements occurred\
              \ - no new sessions were added."
            items:
              $ref: "#/definitions/Session"
            minItems: 1
        201:
          description: "The specified session(s) were replaced and/or added successfully.\
            \  The replaced/added session(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ sessions were new additions to the collection, not just replacements\
            \ of existing sessions."
          schema:
            type: "array"
            description: "The specified session(s) were replaced and/or added successfully.\
              \  The replaced/added session(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ sessions were new additions to the collection, not just replacements\
              \ of existing sessions."
            items:
              $ref: "#/definitions/Session"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete specified session(s)."
      description: "Delete specified session(s)."
      operationId: "adminSessionsDELETE"
      parameters:
      - in: "body"
        name: "sessionsDelete"
        description: "An array containing the IDs or names of one or more sessions\
          \ to delete from the sessions collection.  Use either this request body\
          \ or the provided query args to select which sessions you want to delete.\
          \  WARNING: A DELETE call to this URI with no particular sessions specified\
          \ will cause ALL sessions to be deleted and the ENTIRE collection to be\
          \ cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more sessions\
            \ to delete from the sessions collection.  Use either this request body\
            \ or the provided query args to select which sessions you want to delete.\
            \  WARNING: A DELETE call to this URI with no particular sessions specified\
            \ will cause ALL sessions to be deleted and the ENTIRE collection to be\
            \ cleared."
          items:
            $ref: "#/definitions/SessionInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified session(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify or add the specified session(s)."
      description: "Modify or add the specified session(s).  Specify the session(s)\
        \ to be modified/added using session id or name.  The query args for this\
        \ operation apply only to the returned array confirming your changes."
      operationId: "adminSessionsPATCH"
      parameters:
      - in: "body"
        name: "sessionsPatch"
        description: "An array containing one or more partial session objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any sessions by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial session objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any sessions by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/SessionInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified sessions were modified successfully.  The modified\
            \ sessions are returned in the response body array.  The response array\
            \ can be filtered, sorted, and paged with query arg parameters as with\
            \ the GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new sessions were added."
          schema:
            type: "array"
            description: "The specified sessions were modified successfully.  The\
              \ modified sessions are returned in the response body array.  The response\
              \ array can be filtered, sorted, and paged with query arg parameters\
              \ as with the GET response, if desired.  A 200 response code specifically\
              \ indicates that only modifications occurred - no new sessions were\
              \ added."
            items:
              $ref: "#/definitions/Session"
            minItems: 1
        201:
          description: "The specified sessions were modified and/or added successfully.\
            \  The modified/added sessions are returned in the response body array\
            \ with their assigned IDs and links.  The response array can be filtered,\
            \ sorted, and paged with query arg parameters as with the GET response,\
            \ if desired.  A 201 response code specifically indicates that one or\
            \ more of the sessions were new additions to the collection, not just\
            \ modifications of existing sessions."
          schema:
            type: "array"
            description: "The specified sessions were modified and/or added successfully.\
              \  The modified/added sessions are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the sessions were new additions to the collection, not just\
              \ modifications of existing sessions."
            items:
              $ref: "#/definitions/Session"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
  /admin/sessions/{session}:
    get:
      tags:
      - "Admin"
      summary: "Get the specified session."
      description: "Get the specified session with its info."
      operationId: "adminSessionsSessionGET"
      parameters:
      - name: "session"
        in: "path"
        description: "The ID of the target session."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified session with its info."
          schema:
            $ref: "#/definitions/Session"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace the specified session."
      description: "Replace the specified session."
      operationId: "adminSessionsSessionPUT"
      parameters:
      - name: "session"
        in: "path"
        description: "The ID of the target session."
        required: true
        type: "string"
      - in: "body"
        name: "sessionPut"
        description: "A new session to replace the specified session."
        required: true
        schema:
          $ref: "#/definitions/SessionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified session was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Session"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete the specified session."
      description: "Delete the specified session."
      operationId: "adminSessionsSessionDELETE"
      parameters:
      - name: "session"
        in: "path"
        description: "The ID of the target session."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified session was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify the specified session."
      description: "Modify the specified session."
      operationId: "adminSessionsSessionPATCH"
      parameters:
      - name: "session"
        in: "path"
        description: "The ID of the target session."
        required: true
        type: "string"
      - in: "body"
        name: "sessionPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ session."
        required: true
        schema:
          $ref: "#/definitions/SessionInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified session was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Session"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
  /admin/edits:
    get:
      tags:
      - "Admin"
      summary: "Get the collection of app edits."
      description: "Get the collection of app edits."
      operationId: "adminEditsGET"
      parameters:
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "Object containing the collection of edits with their info."
          schema:
            $ref: "#/definitions/Edits"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    post:
      tags:
      - "Admin"
      summary: "Submit a new edit or edits."
      description: "Submit a new edit or edits to the edits collection.  Edits must\
        \ be submitted in an array, even if there is only one."
      operationId: "adminEditsPOST"
      parameters:
      - in: "body"
        name: "edits"
        description: "An array containing one or more edits to add to the edits collection."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more edits to add to the edits\
            \ collection."
          items:
            $ref: "#/definitions/EditInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        201:
          description: "The specified edits were added successfully.  The newly added\
            \ edits are returned in the response body array with their assigned IDs\
            \ and links.  The response array can be filtered, sorted, and paged with\
            \ query arg parameters as with the GET response, if desired."
          schema:
            type: "array"
            description: "An array containing the newly added edits with their assigned\
              \ IDs and links.  The array can be filtered, sorted, and paged with\
              \ query arg parameters as with the GET response, if desired."
            items:
              $ref: "#/definitions/Edit"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace or add the specified edit(s)."
      description: "Replace or add the specified edit(s).  Specify the edit(s) to\
        \ be replaced/added using edit id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "adminEditsPUT"
      parameters:
      - in: "body"
        name: "editsPut"
        description: "An array containing one or more edits specified by id or name.\
          \  If you specify a edit by name that is not found in the collection already,\
          \ it will be added instead of replaced."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more edits specified by id or name.\
            \  If you specify a edit by name that is not found in the collection already,\
            \ it will be added instead of replaced."
          items:
            $ref: "#/definitions/EditInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified edit(s) were replaced successfully.  The replaced\
            \ edit(s) are returned in the response body array in their new form. \
            \ The response array can be filtered, sorted, and paged with query arg\
            \ parameters as with the GET response, if desired.  A 200 response code\
            \ specifically indicates that only replacements occurred - no new edits\
            \ were added."
          schema:
            type: "array"
            description: "The specified edit(s) were replaced successfully.  The replaced\
              \ edit(s) are returned in the response body array in their new form.\
              \  The response array can be filtered, sorted, and paged with query\
              \ arg parameters as with the GET response, if desired.  A 200 response\
              \ code specifically indicates that only replacements occurred - no new\
              \ edits were added."
            items:
              $ref: "#/definitions/Edit"
            minItems: 1
        201:
          description: "The specified edit(s) were replaced and/or added successfully.\
            \  The replaced/added edit(s) are returned in the response body array\
            \ in their new form.  The response array can be filtered, sorted, and\
            \ paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ edits were new additions to the collection, not just replacements of\
            \ existing edits."
          schema:
            type: "array"
            description: "The specified edit(s) were replaced and/or added successfully.\
              \  The replaced/added edit(s) are returned in the response body array\
              \ in their new form.  The response array can be filtered, sorted, and\
              \ paged with query arg parameters as with the GET response, if desired.\
              \  A 201 response code specifically indicates that one or more of the\
              \ edits were new additions to the collection, not just replacements\
              \ of existing edits."
            items:
              $ref: "#/definitions/Edit"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete specified edit(s)."
      description: "Delete specified edit(s)."
      operationId: "adminEditsDELETE"
      parameters:
      - in: "body"
        name: "editsDelete"
        description: "An array containing the IDs or names of one or more edits to\
          \ delete from the edits collection.  Use either this request body or the\
          \ provided query args to select which edits you want to delete.  WARNING:\
          \ A DELETE call to this URI with no particular edits specified will cause\
          \ ALL edits to be deleted and the ENTIRE collection to be cleared."
        required: false
        schema:
          type: "array"
          description: "An array containing the IDs or names of one or more edits\
            \ to delete from the edits collection.  Use either this request body or\
            \ the provided query args to select which edits you want to delete.  WARNING:\
            \ A DELETE call to this URI with no particular edits specified will cause\
            \ ALL edits to be deleted and the ENTIRE collection to be cleared."
          items:
            $ref: "#/definitions/EditInput"
          minItems: 0
      - name: "ids"
        in: "query"
        description: "A comma-delimited list of IDs specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "names"
        in: "query"
        description: "A comma-delimited list of names specifying the targets in this\
          \ collection to operate on."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 10000000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering target objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values.  The objects in this collection targeted by the filter\
          \ will be operated on."
        required: false
        type: "string"
      responses:
        204:
          description: "The specified edit(s) were deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify or add the specified edit(s)."
      description: "Modify or add the specified edit(s).  Specify the edit(s) to be\
        \ modified/added using edit id or name.  The query args for this operation\
        \ apply only to the returned array confirming your changes."
      operationId: "adminEditsPATCH"
      parameters:
      - in: "body"
        name: "editsPatch"
        description: "An array containing one or more partial edit objects specified\
          \ by id or name along with the fields you want to modify and their new values.\
          \  If you specify any edits by name that are not found in the collection\
          \ already, they will be added instead of modified."
        required: true
        schema:
          type: "array"
          description: "An array containing one or more partial edit objects specified\
            \ by id or name along with the fields you want to modify and their new\
            \ values.  If you specify any edits by name that are not found in the\
            \ collection already, they will be added instead of modified."
          items:
            $ref: "#/definitions/EditInput"
          minItems: 1
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "filter"
        in: "query"
        description: "A filter expression for filtering returned objects.  Works as\
          \ described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
          \ and additionally allows a 'contains' or 'ct' operator for filtering on\
          \ string field values."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "A comma-delimited list of fields to sort returned objects on,\
          \ where the first specified field will be the primary sort, second field\
          \ will be the secondary sort, and so on.  Use <field>:asc or <field>:desc\
          \ to specify ascending or descending sorts, ascending is default."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "limit"
        in: "query"
        description: "The maximum number of objects to return at once."
        required: false
        type: "integer"
        maximum: 10000000
        minimum: 0
      - name: "offset"
        in: "query"
        description: "Used to begin retrieving results from the middle of a collection,\
          \ a zero-based offset from the start of the collection."
        required: false
        type: "integer"
        minimum: 0
      responses:
        200:
          description: "The specified edits were modified successfully.  The modified\
            \ edits are returned in the response body array.  The response array can\
            \ be filtered, sorted, and paged with query arg parameters as with the\
            \ GET response, if desired.  A 200 response code specifically indicates\
            \ that only modifications occurred - no new edits were added."
          schema:
            type: "array"
            description: "The specified edits were modified successfully.  The modified\
              \ edits are returned in the response body array.  The response array\
              \ can be filtered, sorted, and paged with query arg parameters as with\
              \ the GET response, if desired.  A 200 response code specifically indicates\
              \ that only modifications occurred - no new edits were added."
            items:
              $ref: "#/definitions/Edit"
            minItems: 1
        201:
          description: "The specified edits were modified and/or added successfully.\
            \  The modified/added edits are returned in the response body array with\
            \ their assigned IDs and links.  The response array can be filtered, sorted,\
            \ and paged with query arg parameters as with the GET response, if desired.\
            \  A 201 response code specifically indicates that one or more of the\
            \ edits were new additions to the collection, not just modifications of\
            \ existing edits."
          schema:
            type: "array"
            description: "The specified edits were modified and/or added successfully.\
              \  The modified/added edits are returned in the response body array\
              \ with their assigned IDs and links.  The response array can be filtered,\
              \ sorted, and paged with query arg parameters as with the GET response,\
              \ if desired.  A 201 response code specifically indicates that one or\
              \ more of the edits were new additions to the collection, not just modifications\
              \ of existing edits."
            items:
              $ref: "#/definitions/Edit"
            minItems: 1
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
  /admin/edits/{edit}:
    get:
      tags:
      - "Admin"
      summary: "Get the specified edit."
      description: "Get the specified edit with its info."
      operationId: "adminEditsEditGET"
      parameters:
      - name: "edit"
        in: "path"
        description: "The ID of the target edit."
        required: true
        type: "string"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "An object representing the specified edit with its info."
          schema:
            $ref: "#/definitions/Edit"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      security: []
      x-swagger-router-controller: "Admin"
    put:
      tags:
      - "Admin"
      summary: "Replace the specified edit."
      description: "Replace the specified edit."
      operationId: "adminEditsEditPUT"
      parameters:
      - name: "edit"
        in: "path"
        description: "The ID of the target edit."
        required: true
        type: "string"
      - in: "body"
        name: "editPut"
        description: "A new edit to replace the specified edit."
        required: true
        schema:
          $ref: "#/definitions/EditInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified edit was replaced successfully  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Edit"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    delete:
      tags:
      - "Admin"
      summary: "Delete the specified edit."
      description: "Delete the specified edit."
      operationId: "adminEditsEditDELETE"
      parameters:
      - name: "edit"
        in: "path"
        description: "The ID of the target edit."
        required: true
        type: "string"
      responses:
        204:
          description: "The specified edit was deleted successfully."
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
    patch:
      tags:
      - "Admin"
      summary: "Modify the specified edit."
      description: "Modify the specified edit."
      operationId: "adminEditsEditPATCH"
      parameters:
      - name: "edit"
        in: "path"
        description: "The ID of the target edit."
        required: true
        type: "string"
      - in: "body"
        name: "editPatch"
        description: "An object containing one or more fields to modify on the specified\
          \ edit."
        required: true
        schema:
          $ref: "#/definitions/EditInput"
      - name: "expand"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Objects specified by\
          \ these fields will be expanded."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  Only the fields specified\
          \ will be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      - name: "no-fields"
        in: "query"
        description: "A comma-delimited list of fields (attributes) of the objects\
          \ or nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
          \ can be used to address nested sub-object fields.  The fields specified\
          \ will not be returned."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
        maxItems: 1000
        minItems: 0
      responses:
        200:
          description: "The specified edit was modified successfully.  It is returned\
            \ in its new form in the response body.  The response fields can be filtered\
            \ or expanded if desired with the query arg parameters."
          schema:
            $ref: "#/definitions/Edit"
        default:
          description: "Error object in case an unexpected error occurs."
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Admin"
definitions:
  APIRootListing:
    properties:
      version:
        type: "string"
        description: "API version served from this root (example: '1.0')."
      description:
        type: "string"
        description: "API description."
      resources:
        $ref: "#/definitions/APIRootListing_resources"
  Bands:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this bands collection or collection\
          \ segment."
      offset:
        type: "integer"
        description: "The offset from the first band in the collection that is being\
          \ returned in this bands array."
      limit:
        type: "integer"
        description: "The maximum number of bands that will be returned at once."
      total:
        type: "integer"
        description: "The total number of bands in this collection."
      bands:
        type: "array"
        items:
          $ref: "#/definitions/Band"
      bandsCount:
        type: "integer"
        description: "The number of bands actually returned in the bands array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Band:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this band."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this band."
      name:
        type: "string"
        description: "The name of this band."
        minLength: 1
      clickCount:
        type: "integer"
        description: "The number of times have people clicked on this band in the\
          \ Band Map app."
      cities:
        type: "array"
        description: "An array containing the city or cities this band is or has been\
          \ based in, ordered by most recent to oldest."
        items:
          $ref: "#/definitions/Band_cities"
        minItems: 0
      citiesCount:
        type: "integer"
        description: "The total number of cities this band is known to have been based\
          \ in.  Should be equal to cities.length."
        minimum: 0
      people:
        type: "array"
        description: "An array containing the members or other people associated with\
          \ this band."
        items:
          $ref: "#/definitions/Band_people"
        minItems: 0
      peopleCount:
        type: "integer"
        description: "The total number of people in or associated with this band.\
          \  Should be equal to people.length."
        minimum: 0
      connectedBands:
        type: "array"
        description: "An array containing other bands this band is connected to."
        items:
          $ref: "#/definitions/Band_connectedBands"
        minItems: 0
      connectedBandsCount:
        type: "integer"
        description: "The total number of other bands connected to this band.  Should\
          \ be equal to connectedBands.length."
        minimum: 0
      webLinks:
        type: "array"
        description: "An array of web links related to this band."
        items:
          $ref: "#/definitions/Band_webLinks"
        minItems: 0
      webLinksCount:
        type: "integer"
        description: "The total number of web links related to this band.  Should\
          \ be equal to webLinks.length."
        minimum: 0
  BandInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target band for PATCH or PUT methods."
      name:
        type: "string"
        description: "The name of this band."
        minLength: 1
      cities:
        type: "array"
        description: "An array containing the city or cities this band is or has been\
          \ based in."
        items:
          $ref: "#/definitions/BandInput_cities"
        minItems: 0
      people:
        type: "array"
        description: "An array containing the members or other people associated with\
          \ this band."
        items:
          $ref: "#/definitions/BandInput_people"
        minItems: 0
      connectedBands:
        type: "array"
        description: "An array containing other bands this band is connected to. \
          \ Connections due to shared members will be created automatically and should\
          \ not be added here."
        items:
          $ref: "#/definitions/BandInput_connectedBands"
        minItems: 0
      webLinks:
        type: "array"
        description: "An array of web links to add for this band."
        items:
          $ref: "#/definitions/BandInput_webLinks"
        minItems: 0
  BandBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this band."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this band."
      name:
        type: "string"
        description: "The name of this band."
        minLength: 1
  BandBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the band."
      name:
        type: "string"
        description: "The name of the band."
        minLength: 1
  People:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this people collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first person in the collection that is being\
          \ returned in this people array."
      limit:
        type: "integer"
        description: "The maximum number of people that will be returned at once."
      total:
        type: "integer"
        description: "The total number of people in this collection."
      people:
        type: "array"
        items:
          $ref: "#/definitions/Person"
      peopleCount:
        type: "integer"
        description: "The number of people actually returned in this people array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Person:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this person."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this person."
      name:
        type: "string"
        description: "This person's name."
        minLength: 1
      from:
        type: "string"
        format: "date"
        description: "The date this person first has any roles in bands recorded in\
          \ Band Map.  The format is YYYY-MM-DD.  This field will only be present\
          \ if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stops having any roles in bands recorded\
          \ in Band Map.  The format is YYYY-MM-DD.  This field will only be present\
          \ if a value is known."
      bands:
        type: "array"
        description: "An array containing the bands this person is a member of or\
          \ is associated with."
        items:
          $ref: "#/definitions/Person_bands"
        minItems: 0
      bandsCount:
        type: "integer"
        description: "The total number of bands this person has been in or associated\
          \ with.  Should be equal to bands.length."
        minimum: 0
      roles:
        type: "array"
        description: "An array containing the roles this person has had (in a band\
          \ or not)."
        items:
          $ref: "#/definitions/Person_roles_1"
        minItems: 0
      rolesCount:
        type: "integer"
        description: "The total number of roles this person has had.  Should be equal\
          \ to roles.length."
        minimum: 0
      cities:
        type: "array"
        description: "An array containing the city or cities this person is or has\
          \ been based in, in bands or not, ordered by most recent to oldest."
        items:
          $ref: "#/definitions/Person_cities"
        minItems: 0
      citiesCount:
        type: "integer"
        description: "The total number of cities this person has been based in.  Should\
          \ be equal to cities.length."
        minimum: 0
  PersonInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target person for PATCH or PUT\
          \ methods."
      name:
        type: "string"
        description: "This person's name."
        minLength: 1
      from:
        type: "string"
        format: "date"
        description: "The date this person first has any roles in bands recorded in\
          \ Band Map.  The format is YYYY-MM-DD.  This field will only be present\
          \ if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stops having any roles in bands recorded\
          \ in Band Map.  The format is YYYY-MM-DD.  This field will only be present\
          \ if a value is known."
      bands:
        type: "array"
        description: "An array containing the bands this person is a member of or\
          \ is associated with."
        items:
          $ref: "#/definitions/PersonInput_bands"
        minItems: 0
      roles:
        type: "array"
        description: "An array containing the roles this person has had (in a band\
          \ or not)."
        items:
          $ref: "#/definitions/PersonInput_roles_1"
        minItems: 0
      cities:
        type: "array"
        description: "An array containing the city or cities this person is or has\
          \ been based in, in bands or not, ordered by most recent to oldest."
        items:
          $ref: "#/definitions/PersonInput_cities"
        minItems: 0
  PersonBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this person."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this person."
      name:
        type: "string"
        description: "This person's name."
        minLength: 1
  PersonBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the person to delete."
      name:
        type: "string"
        description: "The name of the person to delete."
        minLength: 1
  Roles:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this roles collection or collection\
          \ segment."
      offset:
        type: "integer"
        description: "The offset from the first role in the collection that is being\
          \ returned in this roles array."
      limit:
        type: "integer"
        description: "The maximum number of roles that will be returned at once."
      total:
        type: "integer"
        description: "The total number of roles in this collection."
      roles:
        type: "array"
        items:
          $ref: "#/definitions/Role"
      rolesCount:
        type: "integer"
        description: "The number of roles actually returned in this roles array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Role:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this role."
      name:
        type: "string"
        description: "This role's name."
        minLength: 1
      people:
        type: "array"
        description: "An array containing everyone in the main people collection that\
          \ has this role."
        items:
          $ref: "#/definitions/Role_people"
        minItems: 0
      peopleCount:
        type: "integer"
        description: "The total number of people in the main people collection that\
          \ have this role.  Should be equal to people.length."
        minimum: 0
      bands:
        type: "array"
        description: "An array containing the bands in the main bands collection with\
          \ someone with this role."
        items:
          $ref: "#/definitions/Role_bands"
        minItems: 0
      bandsCount:
        type: "integer"
        description: "The total number of bands in the main bands collection with\
          \ someone with this role.  Should be equal to bands.length."
        minimum: 0
  RoleInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target role for the operation."
      name:
        type: "string"
        description: "The role's name."
        minLength: 1
  Connections:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this connections collection\
          \ or collection segment."
      offset:
        type: "integer"
        description: "The offset from the first connection in the collection that\
          \ is being returned in this connections array."
      limit:
        type: "integer"
        description: "The maximum number of connections that will be returned at once."
      total:
        type: "integer"
        description: "The total number of connections in this collection."
      connections:
        type: "array"
        items:
          $ref: "#/definitions/Connection"
      connectionsCount:
        type: "integer"
        description: "The number of connections actually returned in this connections\
          \ array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Connection:
    properties:
      id:
        type: "string"
        description: "The unique, stable ID of this connection.  It will be a string\
          \ of the form \"<band1-id>-<band2-id>\"."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this connection."
      band1:
        $ref: "#/definitions/BandBasics"
      band2:
        $ref: "#/definitions/BandBasics"
      description:
        type: "string"
        description: "A brief description of the connection, like \"Shared members:\
          \ Member One, Member Two.\"."
  ConnectionInput:
    properties:
      id:
        type: "string"
        description: "The unique, stable ID of this connection, if it exists in the\
          \ connections collection, for targeting by PATCH or PUT operations.  It\
          \ will be a string of the form \"<band1-id>-<band2-id>\"."
      band1:
        $ref: "#/definitions/BandBasicsInput"
      band2:
        $ref: "#/definitions/BandBasicsInput"
      description:
        type: "string"
        description: "A brief description of the connection, like \"Shared members:\
          \ Member One, Member Two.\"."
  Cities:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this cities collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first city in the collection that is being\
          \ returned in this cities array."
      limit:
        type: "integer"
        description: "The maximum number of cities that will be returned at once."
      total:
        type: "integer"
        description: "The total number of cities in this collection."
      cities:
        type: "array"
        items:
          $ref: "#/definitions/City"
      citiesCount:
        type: "integer"
        description: "The number of cities actually returned in this cities array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  City:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this city."
      name:
        type: "string"
        description: "The name of this city."
      state:
        $ref: "#/definitions/StateBasics"
      country:
        $ref: "#/definitions/CountryBasics"
  CityInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target city, if it already exists\
          \ in the cities collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of the target city."
      state:
        $ref: "#/definitions/StateBasicsInput"
      country:
        $ref: "#/definitions/CountryBasicsInput"
  CityBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this city."
      name:
        type: "string"
        description: "The name of this city."
  CityBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target city, if it already exists\
          \ in the cities collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of the target city."
  States:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this states collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first state in the collection that is being\
          \ returned in this states array."
      limit:
        type: "integer"
        description: "The maximum number of states that will be returned at once."
      total:
        type: "integer"
        description: "The total number of states in this collection."
      states:
        type: "array"
        items:
          $ref: "#/definitions/State"
      statesCount:
        type: "integer"
        description: "The number of states actually returned in this states array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  State:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this state/province/prefecture."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this state/province/prefecture."
      name:
        type: "string"
        description: "The name of this state/province/prefecture.  State names are\
          \ typically abbreviated, like \"WA\" for \"Washington\"."
      country:
        $ref: "#/definitions/CountryBasics"
      cities:
        type: "array"
        description: "The cities that belong to this state/province/prefecture."
        items:
          $ref: "#/definitions/CityBasics"
        minItems: 0
      citiesCount:
        type: "integer"
        description: "The total number of cities that belong to this state/province/prefecture.\
          \  Should be equal to cities.length."
        minimum: 0
  StateInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this state/province/prefecture, if\
          \ it already exists in the states collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of the state/province/prefecture.  State names are\
          \ typically abbreviated, like \"WA\" for \"Washington\"."
      country:
        $ref: "#/definitions/CountryBasicsInput"
      cities:
        type: "array"
        description: "The cities that belong to this state/province/prefecture."
        items:
          $ref: "#/definitions/CityBasicsInput"
        minItems: 0
  StateBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this state/province/prefecture."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this state/province/prefecture."
      name:
        type: "string"
        description: "The name of this state/province/prefecture.  State names are\
          \ typically abbreviated, like \"WA\" for \"Washington\"."
  StateBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target state, if it already exists\
          \ in the states collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of the target state."
  Countries:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this countries collection\
          \ or collection segment."
      offset:
        type: "integer"
        description: "The offset from the first country in the collection that is\
          \ being returned in this countries array."
      limit:
        type: "integer"
        description: "The maximum number of countries that will be returned at once."
      total:
        type: "integer"
        description: "The total number of countries in this collection."
      countries:
        type: "array"
        items:
          $ref: "#/definitions/Country"
      countriesCount:
        type: "integer"
        description: "The number of countries actually returned in this countries\
          \ array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Country:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this country."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this country."
      name:
        type: "string"
        description: "The name of this country, possibly abbreviated, like \"USA\"\
          ."
      states:
        type: "array"
        description: "The states/provinces/prefectures that belong to this country."
        items:
          $ref: "#/definitions/StateBasics"
        minItems: 0
      statesCount:
        type: "integer"
        description: "The total number of states/provinces/prefectures that belong\
          \ to this country.  Should be equal to states.length."
        minimum: 0
  CountryInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target country, if it already exists\
          \ in the states collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of this country, possibly abbreviated, like \"USA\"\
          ."
      states:
        type: "array"
        description: "The states/provinces/prefectures that belong to this country."
        items:
          $ref: "#/definitions/StateBasicsInput"
        minItems: 0
  CountryBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this country."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this country."
      name:
        type: "string"
        description: "The name of this country, possibly abbreviated, like \"USA\"\
          ."
  CountryBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target country, if it already exists\
          \ in the states collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of the target country, possibly abbreviated, like \"\
          USA\"."
  Regions:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this regions collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first region in the collection that is being\
          \ returned in this regions array."
      limit:
        type: "integer"
        description: "The maximum number of regions that will be returned at once."
      total:
        type: "integer"
        description: "The total number of regions in this collection."
      regions:
        type: "array"
        items:
          $ref: "#/definitions/Region"
      regionsCount:
        type: "integer"
        description: "The number of regions actually returned in this regions array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Region:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this region."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this region."
      name:
        type: "string"
        description: "The name of this region, like \"Pacific Northwest\"."
      subRegions:
        type: "array"
        description: "Other regions that belong to this region, if it is composed\
          \ of any other regions."
        items:
          $ref: "#/definitions/RegionBasics"
        minItems: 0
      subRegionsCount:
        type: "integer"
        description: "The total number of sub-regions that belong to this region.\
          \  Should be equal to subRegions.length."
        minimum: 0
      countries:
        type: "array"
        description: "The countries that belong to this region."
        items:
          $ref: "#/definitions/CountryBasics"
        minItems: 0
      countriesCount:
        type: "integer"
        description: "The total number of countries that belong to this region.  Should\
          \ be equal to countries.length."
        minimum: 0
      states:
        type: "array"
        description: "The states/provinces/prefectures that belong to this region."
        items:
          $ref: "#/definitions/StateBasics"
        minItems: 0
      statesCount:
        type: "integer"
        description: "The total number of states/provinces/prefectures that belong\
          \ to this region.  Should be equal to states.length."
        minimum: 0
      cities:
        type: "array"
        description: "The cities that belong to this region."
        items:
          $ref: "#/definitions/CityBasics"
        minItems: 0
      citiesCount:
        type: "integer"
        description: "The total number of cities that belong to this region.  Should\
          \ be equal to cities.length."
        minimum: 0
  RegionInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target region, if it already exists\
          \ in the regions collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of this region, like \"Pacific Northwest\"."
      subRegions:
        type: "array"
        description: "Other regions that belong to this region, if it is composed\
          \ of any other regions."
        items:
          $ref: "#/definitions/RegionBasicsInput"
        minItems: 0
      countries:
        type: "array"
        description: "The countries that belong to this region."
        items:
          $ref: "#/definitions/CountryBasicsInput"
        minItems: 0
      states:
        type: "array"
        description: "The states/provinces/prefectures that belong to this region."
        items:
          $ref: "#/definitions/StateBasicsInput"
        minItems: 0
      cities:
        type: "array"
        description: "The cities that belong to this region."
        items:
          $ref: "#/definitions/CityBasicsInput"
        minItems: 0
  RegionBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this region."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this region."
      name:
        type: "string"
        description: "The name of this region, like \"Pacific Northwest\"."
  RegionBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target region, if it already exists\
          \ in the regions collection, for PATCHes and PUTs."
      name:
        type: "string"
        description: "The name of this region, like \"Pacific Northwest\"."
  Accounts:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this accounts collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first account in the collection that is\
          \ being returned in this accounts array."
      limit:
        type: "integer"
        description: "The maximum number of accounts that will be returned at once."
      total:
        type: "integer"
        description: "The total number of accounts in this collection."
      regions:
        type: "array"
        items:
          $ref: "#/definitions/Account"
      regionsCount:
        type: "integer"
        description: "The number of accounts actually returned in this accounts array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Account:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this account."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this account."
      username:
        type: "string"
        description: "The username of this Band Map user.  Edits and session logs\
          \ will appear under this name, rather than the associated person name (if\
          \ one exists)."
        minLength: 1
        maxLength: 128
      type:
        type: "string"
        description: "The type or role of this user in the Band Map app."
        enum:
        - "user"
        - "admin"
      identityType:
        type: "string"
        description: "The mechanism used by the API to identify and authenticate this\
          \ user.  'bandmap' identified users use Band Map's own stored email and\
          \ password hash to authenticate, rather than a third party's API like Google\
          \ or Facebook."
        enum:
        - "bandmap"
      email:
        type: "string"
        description: "This user's email address."
      isAccountVerified:
        type: "boolean"
        description: "True if this user has confirmed their email address and logged\
          \ in successfully once with their password."
        default: false
      person:
        $ref: "#/definitions/PersonBasics"
      isAccountDeleted:
        type: "boolean"
        description: "True if this user has deleted their account, but we need to\
          \ keep the account record so session and edit relations are still coherent.\
          \  This field appears for admin requests only."
        default: false
      recentSessions:
        type: "array"
        description: "The last 100 or last year's worth of app sessions this user\
          \ had, whichever number is smaller.  This field appears for admin requests\
          \ only."
        items:
          $ref: "#/definitions/SessionBasics"
        minItems: 0
      recentSessionsCount:
        type: "integer"
        description: "The number of recent sessions for this user.  Should be equal\
          \ to recentSessions.length."
        minimum: 0
      totalSessionsCount:
        type: "integer"
        description: "The total number of sessions this user has ever had."
        minimum: 0
      recentEdits:
        type: "array"
        description: "The last 1000 or last year's worth of edits this user made,\
          \ whichever number is smaller.  This field appears for admin requests only."
        items:
          $ref: "#/definitions/EditBasics"
        minItems: 0
      recentEditsCount:
        type: "integer"
        description: "The number of recent edits for this user.  Should be equal to\
          \ recentEdits.length."
        minimum: 0
      totalEditsCount:
        type: "integer"
        description: "The total number of edits this user has ever had."
        minimum: 0
  AccountInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target account, if it already exists\
          \ in the database, for PATCHes and PUTs."
      username:
        type: "string"
        description: "The username of this Band Map user.  Edits and session logs\
          \ will appear under this name, rather than the associated person name (if\
          \ one exists)."
        minLength: 1
        maxLength: 128
      type:
        type: "string"
        description: "The type or role of this user in the Band Map app."
        enum:
        - "user"
        - "admin"
      identityType:
        type: "string"
        description: "The mechanism used by the API to identify and authenticate this\
          \ user.  'bandmap' identified users use Band Map's own stored email and\
          \ password hash to authenticate, rather than a third party's API like Google\
          \ or Facebook."
        enum:
        - "bandmap"
      email:
        type: "string"
        description: "This user's email address."
      password:
        type: "string"
        description: "The user's new hashed and salted password key."
      retypedPassword:
        type: "string"
        description: "A confirmation field to double-check the user's new hashed and\
          \ salted password key."
      oldPassword:
        type: "string"
        description: "A confirmation field to double-check the user's old hashed and\
          \ salted password key for PATCHing password changes (with security precautions\
          \ identical to the 'password' field)."
      isAccountVerified:
        type: "boolean"
        description: "True if this user has confirmed their email address and logged\
          \ in successfully once with their password."
        default: false
      person:
        $ref: "#/definitions/PersonBasics"
      isAccountDeleted:
        type: "boolean"
        description: "True if this user has deleted their account, but we need to\
          \ keep the account record so session and edit relations are still coherent.\
          \  This field appears for admin requests only."
        default: false
      recentSessions:
        type: "array"
        description: "The last 100 or last year's worth of app sessions this user\
          \ had, whichever number is smaller.  This field appears for admin requests\
          \ only."
        items:
          $ref: "#/definitions/SessionBasics"
        minItems: 0
      recentEdits:
        type: "array"
        description: "The last 1000 or last year's worth of edits this user made,\
          \ whichever number is smaller.  This field appears for admin requests only."
        items:
          $ref: "#/definitions/EditBasics"
        minItems: 0
  AccountBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this account."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this account."
      username:
        type: "string"
        description: "The username of this Band Map user.  Edits and session logs\
          \ will appear under this name, rather than the associated person name (if\
          \ one exists)."
        minLength: 1
        maxLength: 128
  AccountBasicsInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target account, if it already exists\
          \ in the database, for PATCHes and PUTs."
      username:
        type: "string"
        description: "The username of this Band Map user.  Edits and session logs\
          \ will appear under this name, rather than the associated person name (if\
          \ one exists)."
        minLength: 1
        maxLength: 128
  Sessions:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this sessions collection or\
          \ collection segment."
      offset:
        type: "integer"
        description: "The offset from the first session in the collection that is\
          \ being returned in this sessions array."
      limit:
        type: "integer"
        description: "The maximum number of sessions that will be returned at once."
      total:
        type: "integer"
        description: "The total number of sessions in this collection."
      regions:
        type: "array"
        items:
          $ref: "#/definitions/Session"
      regionsCount:
        type: "integer"
        description: "The number of sessions actually returned in this sessions array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Session:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this session."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this session."
      ipAddress:
        type: "string"
        description: "The IP address this session's user connected from."
      account:
        $ref: "#/definitions/AccountBasics"
      start:
        type: "string"
        format: "datetime"
        description: "The date and time this session started."
      end:
        type: "string"
        format: "datetime"
        description: "The date and time this session ended."
      edits:
        type: "array"
        description: "An array containing all the edits that were made during this\
          \ session."
        items:
          $ref: "#/definitions/EditBasics"
        minItems: 0
      editsCount:
        type: "integer"
        description: "The number of edits made during this session.  Should be equal\
          \ to edits.length."
        minimum: 0
  SessionInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target session."
      ipAddress:
        type: "string"
        description: "The IP address this session's user connected from."
      account:
        $ref: "#/definitions/AccountBasicsInput"
      start:
        type: "string"
        format: "datetime"
        description: "The date and time this session started."
      end:
        type: "string"
        format: "datetime"
        description: "The date and time this session ended."
      edits:
        type: "array"
        description: "An array containing all the edits that were made during this\
          \ session."
        items:
          $ref: "#/definitions/EditBasics"
        minItems: 0
  SessionBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this session."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this session."
  Edits:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to this edits collection or collection\
          \ segment."
      offset:
        type: "integer"
        description: "The offset from the first edit in the collection that is being\
          \ returned in this edits array."
      limit:
        type: "integer"
        description: "The maximum number of edits that will be returned at once."
      total:
        type: "integer"
        description: "The total number of edits in this collection."
      regions:
        type: "array"
        items:
          $ref: "#/definitions/Edit"
      regionsCount:
        type: "integer"
        description: "The number of edits actually returned in this edits array."
      first:
        $ref: "#/definitions/FirstLink"
      prev:
        $ref: "#/definitions/NextLink"
      next:
        $ref: "#/definitions/PrevLink"
      last:
        $ref: "#/definitions/LastLink"
  Edit:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this edit."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this session."
      session:
        $ref: "#/definitions/SessionBasics"
      description:
        type: "string"
        description: "A friendly \"display phrase\" for this edit, suitable for showing\
          \ in an easily-human-scannable edit history table.  Like \"Added the band\
          \ Love Battery.\" or \"Changed the role of Duff McKagen in Ten Minute Warning\
          \ from bassist to guitarist.\""
      type:
        type: "string"
        description: "Was this an insert, update, or delete on a database table?"
        enum:
        - "insert"
        - "update"
        - "delete"
      table:
        type: "string"
        description: "The name of the table this edit affected."
      targetRowId:
        type: "integer"
        description: "The row (id) this edit affected."
      column:
        type: "string"
        description: "The name of the column this edit affected."
      oldValue:
        type: "string"
        description: "The previous value of the affected cell.  This field does not\
          \ appear for inserts."
      newValue:
        type: "string"
        description: "The new value of the affected cell.  This field does not appear\
          \ for deletes."
  EditInput:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the target edit."
      session:
        $ref: "#/definitions/SessionBasics"
      description:
        type: "string"
        description: "A friendly \"display phrase\" for this edit, suitable for showing\
          \ in an easily-human-scannable edit history table.  Like \"Added the band\
          \ Love Battery.\" or \"Changed the role of Duff McKagen in Ten Minute Warning\
          \ from bassist to guitarist.\""
      type:
        type: "string"
        description: "Was this an insert, update, or delete on a database table?"
        enum:
        - "insert"
        - "update"
        - "delete"
      table:
        type: "string"
        description: "The name of the table this edit affected."
      targetRowId:
        type: "integer"
        description: "The row (id) this edit affected."
      column:
        type: "string"
        description: "The name of the column this edit affected."
      oldValue:
        type: "string"
        description: "The previous value of the affected cell.  This field does not\
          \ appear for inserts."
      newValue:
        type: "string"
        description: "The new value of the affected cell.  This field does not appear\
          \ for deletes."
  EditBasics:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this edit."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this session."
  FirstLink:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to the first segment in this\
          \ collection for the given limit."
  PrevLink:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to the previous segment in this\
          \ collection for the given limit and offset."
  NextLink:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to the next segment in this collection\
          \ for the given limit and offset."
  LastLink:
    properties:
      link:
        type: "string"
        description: "A stable, absolute URL linking to the last segment in this collection\
          \ for the given limit."
  Error:
    properties:
      error:
        $ref: "#/definitions/Error_error"
  APIRootListing_resources_bands:
    properties:
      link:
        type: "string"
        description: "Link to the bands resource."
      description:
        type: "string"
        description: "Description of the bands resource."
    description: "Object containing info about the bands resource."
  APIRootListing_resources_people:
    properties:
      link:
        type: "string"
        description: "Link to the people resource."
      description:
        type: "string"
        description: "Description of the people resource."
    description: "Object containing info about the people resource."
  APIRootListing_resources_roles:
    properties:
      link:
        type: "string"
        description: "Link to the roles resource."
      description:
        type: "string"
        description: "Description of the roles resource."
    description: "Object containing info about the roles resource."
  APIRootListing_resources_connections:
    properties:
      link:
        type: "string"
        description: "Link to the roles resource."
      description:
        type: "string"
        description: "Description of the roles resource."
    description: "Object containing info about the connections resource."
  APIRootListing_resources_locations:
    properties:
      link:
        type: "string"
        description: "Link to the locations resources listing."
      description:
        type: "string"
        description: "Description of the locations resources listing."
    description: "Object containing info about the locations resources."
  APIRootListing_resources_admin:
    properties:
      link:
        type: "string"
        description: "Link to the admin resources listing."
      description:
        type: "string"
        description: "Description of the admin resources listing."
    description: "Object containing info about the admin resources."
  APIRootListing_resources:
    properties:
      bands:
        $ref: "#/definitions/APIRootListing_resources_bands"
      people:
        $ref: "#/definitions/APIRootListing_resources_people"
      roles:
        $ref: "#/definitions/APIRootListing_resources_roles"
      connections:
        $ref: "#/definitions/APIRootListing_resources_connections"
      locations:
        $ref: "#/definitions/APIRootListing_resources_locations"
      admin:
        $ref: "#/definitions/APIRootListing_resources_admin"
    description: "Listing of available resources."
  Band_cities:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this city."
      name:
        type: "string"
        description: "The name of this city, formatted like \"Seattle, WA, USA\"."
      from:
        type: "string"
        format: "date"
        description: "The date this band started being based in this city from.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this band stopped being based in this city from.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
  Band_roles:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this role."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\")."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role in this band from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role in this band from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
  Band_people:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this person."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this person."
      name:
        type: "string"
        description: "This person's name."
      from:
        type: "string"
        format: "date"
        description: "The date this person started playing in this band from.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped playing in this band from.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
      roles:
        type: "array"
        description: "An array containing the roles this person has had in this band\
          \ (like instruments played)."
        items:
          $ref: "#/definitions/Band_roles"
        minItems: 0
      rolesCount:
        type: "integer"
        description: "The total number of roles this person is known to have had in\
          \ this band.  Should be equal to roles.length."
        minimum: 0
  Band_connectedBands:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this connected band."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this connected band."
      name:
        type: "string"
        description: "The name of this connected band."
      description:
        type: "string"
        description: "A brief description of the connection, like \"Shared members:\
          \ Member One, Member Two.\"."
  Band_webLinks:
    properties:
      url:
        type: "string"
        description: "The URL of this band web link."
      description:
        type: "string"
        description: "A description of this web link.  This field will only be present\
          \ if a description was entered."
  BandInput_cities:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city, if it already exists in\
          \ the cities collection."
      name:
        type: "string"
        description: "The name of this city, for example \"Seattle\".  If the city\
          \ does not already exist, it will be created."
      from:
        type: "string"
        format: "date"
        description: "The date this band started being based in this city from.  The\
          \ format is YYYY-MM-DD."
      until:
        type: "string"
        format: "date"
        description: "The date this band stopped being based in this city from.  The\
          \ format is YYYY-MM-DD."
  BandInput_roles:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role, if it already exists in\
          \ the roles collection."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\").  If it is a new\
          \ type of role, it will be added to the roles collection."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role in this band from.\
          \  The format is YYYY-MM-DD."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role in this band from.\
          \  The format is YYYY-MM-DD."
  BandInput_people:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this person, if they already exist\
          \ in the people collection."
      name:
        type: "string"
        description: "This person's name.  If they don't already exist in the people\
          \ collection, they will be added."
      from:
        type: "string"
        format: "date"
        description: "The date this person started playing in this band from.  The\
          \ format is YYYY-MM-DD."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped playing in this band from.  The\
          \ format is YYYY-MM-DD."
      roles:
        type: "array"
        description: "An array containing the roles this person has had in this band\
          \ (like instruments played)."
        items:
          $ref: "#/definitions/BandInput_roles"
        minItems: 0
  BandInput_connectedBands:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of the connected band, if it already exists\
          \ in the bands collection."
      name:
        type: "string"
        description: "The name of the connected band.  It will be added to the bands\
          \ collection if it is not already there."
      description:
        type: "string"
        description: "A brief description of the connection since it is not about\
          \ shared members."
        minLength: 1
  BandInput_webLinks:
    properties:
      url:
        type: "string"
        description: "The URL of this band web link."
        minLength: 1
      description:
        type: "string"
        description: "A description of this web link."
  Person_roles:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this role."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\")."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role in this band from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role in this band from,\
          \ if ever.  The format is YYYY-MM-DD.  This field will only be present if\
          \ a value is known."
  Person_bands:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this band."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this band."
      name:
        type: "string"
        description: "The name of this band."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having a role in this band from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having a role in this band from,\
          \ if ever.  The format is YYYY-MM-DD.  This field will only be present if\
          \ a value is known."
      roles:
        type: "array"
        description: "An array containing the roles this person has had in this band\
          \ (like instruments played)."
        items:
          $ref: "#/definitions/Person_roles"
        minItems: 0
      rolesCount:
        type: "integer"
        description: "The total number of roles this person is has had in this band.\
          \  Should be equal to roles.length."
        minimum: 0
  Person_roles_1:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this role."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\")."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role.  The format is\
          \ YYYY-MM-DD.  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role, if ever.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
  Person_cities:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this city."
      name:
        type: "string"
        description: "The name of this city, formatted like \"Seattle, WA, USA\"."
      from:
        type: "string"
        format: "date"
        description: "The date this person started being based in this city from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this band stopped being based in this city from, if\
          \ any.  The format is YYYY-MM-DD.  This field will only be present if a\
          \ value is known."
  PersonInput_roles:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role, if it exists already in\
          \ the main roles collection."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\").  If this is a new\
          \ type of role not seen before in Band Map, it will be added to the main\
          \ roles collection."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role in this band from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role in this band from,\
          \ if ever.  The format is YYYY-MM-DD.  This field will only be present if\
          \ a value is known."
  PersonInput_bands:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this band, if it exists already in\
          \ the main bands collection."
      name:
        type: "string"
        description: "The name of this band.  If this band does not already exist\
          \ in the main bands collection, it will be added."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having a role in this band from.\
          \  The format is YYYY-MM-DD."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having a role in this band from,\
          \ if ever.  The format is YYYY-MM-DD."
      roles:
        type: "array"
        description: "An array containing the roles this person has had in this band\
          \ (like instruments played)."
        items:
          $ref: "#/definitions/PersonInput_roles"
        minItems: 0
  PersonInput_roles_1:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this role, if it exists already in\
          \ the main roles collection."
      name:
        type: "string"
        description: "The name of this role (like \"Guitarist\").  If this is a new\
          \ type of role not seen before in Band Map, it will be added to the main\
          \ roles collection."
      from:
        type: "string"
        format: "date"
        description: "The date this person started having this role.  The format is\
          \ YYYY-MM-DD.  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person stopped having this role, if ever.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
  PersonInput_cities:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this city, if it already exists in\
          \ the cities collection."
      name:
        type: "string"
        description: "The name of this city, for example \"Seattle\".  If the city\
          \ does not already exist, it will be created."
      from:
        type: "string"
        format: "date"
        description: "The date this person started being based in this city from.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
      until:
        type: "string"
        format: "date"
        description: "The date this band stopped being based in this city from, if\
          \ any.  The format is YYYY-MM-DD.  This field will only be present if a\
          \ value is known."
  Role_people:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this person."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this person."
      name:
        type: "string"
        description: "This person's name."
      from:
        type: "string"
        format: "date"
        description: "The date this person first had this role.  The format is YYYY-MM-DD.\
          \  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The date this person last had this role, if applicable.  The\
          \ format is YYYY-MM-DD.  This field will only be present if a value is known."
  Role_bands:
    properties:
      id:
        type: "integer"
        description: "The unique, stable ID of this band."
      link:
        type: "string"
        description: "A stable, absolute URL linking to this band."
      name:
        type: "string"
        description: "The name of this band."
      from:
        type: "string"
        format: "date"
        description: "The date someone first had this role in this band.  The format\
          \ is YYYY-MM-DD.  This field will only be present if a value is known."
      until:
        type: "string"
        format: "date"
        description: "The last date someone had this role in this band, if applicable.\
          \  The format is YYYY-MM-DD.  This field will only be present if a value\
          \ is known."
  Error_error:
    properties:
      code:
        type: "string"
        description: "A short error code string describing the error that occurred."
        enum:
        - "UnknownError"
        - "MultipleErrors"
      message:
        type: "string"
        description: "A more detailed message describing this error."
    description: "An object containing details about an error or errors that occurred\
      \ processing the request."
parameters:
  expandParam:
    name: "expand"
    in: "query"
    description: "A comma-delimited list of fields (attributes) of the objects or\
      \ nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
      \ can be used to address nested sub-object fields.  Objects specified by these\
      \ fields will be expanded."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 1000
    minItems: 0
  fieldsParam:
    name: "fields"
    in: "query"
    description: "A comma-delimited list of fields (attributes) of the objects or\
      \ nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
      \ can be used to address nested sub-object fields.  Only the fields specified\
      \ will be returned."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 1000
    minItems: 0
  noFieldsParam:
    name: "no-fields"
    in: "query"
    description: "A comma-delimited list of fields (attributes) of the objects or\
      \ nested sub-objects returned at this resource.  Dot notation (like field.subfield)\
      \ can be used to address nested sub-object fields.  The fields specified will\
      \ not be returned."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 1000
    minItems: 0
  filterParam:
    name: "filter"
    in: "query"
    description: "A filter expression for filtering returned objects.  Works as described\
      \ in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
      \ and additionally allows a 'contains' or 'ct' operator for filtering on string\
      \ field values."
    required: false
    type: "string"
  sortParam:
    name: "sort"
    in: "query"
    description: "A comma-delimited list of fields to sort returned objects on, where\
      \ the first specified field will be the primary sort, second field will be the\
      \ secondary sort, and so on.  Use <field>:asc or <field>:desc to specify ascending\
      \ or descending sorts, ascending is default."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 1000
    minItems: 0
  limitParam:
    name: "limit"
    in: "query"
    description: "The maximum number of objects to return at once."
    required: false
    type: "integer"
    maximum: 10000000
    minimum: 0
  offsetParam:
    name: "offset"
    in: "query"
    description: "Used to begin retrieving results from the middle of a collection,\
      \ a zero-based offset from the start of the collection."
    required: false
    type: "integer"
    minimum: 0
  idsParam:
    name: "ids"
    in: "query"
    description: "A comma-delimited list of IDs specifying the targets in this collection\
      \ to operate on."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 10000000
    minItems: 0
  namesParam:
    name: "names"
    in: "query"
    description: "A comma-delimited list of names specifying the targets in this collection\
      \ to operate on."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "csv"
    maxItems: 10000000
    minItems: 0
  filterInputParam:
    name: "filter"
    in: "query"
    description: "A filter expression for filtering target objects.  Works as described\
      \ in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering),\
      \ and additionally allows a 'contains' or 'ct' operator for filtering on string\
      \ field values.  The objects in this collection targeted by the filter will\
      \ be operated on."
    required: false
    type: "string"
  bandParam:
    name: "band"
    in: "path"
    description: "The ID or name of the target band.  If you are specifying the band\
      \ by name, preserve any spaces between words in the band name in the URL - they\
      \ will be processed normally."
    required: true
    type: "string"
  personParam:
    name: "person"
    in: "path"
    description: "The ID or name of the target person.  If you are specifying the\
      \ person by name, preserve any spaces between words in their name in the URL\
      \ - they will be processed normally."
    required: true
    type: "string"
  roleParam:
    name: "role"
    in: "path"
    description: "The ID or name of the target role.  If you are specifying the role\
      \ by name, preserve any spaces between words in the name in the URL - they will\
      \ be processed normally."
    required: true
    type: "string"
  connectionParam:
    name: "connection"
    in: "path"
    description: "A specification of the target connection.  In the URL, a connection\
      \ can be specified in either of two ways: canonical id (like \"123-456\"), or\
      \ name id (like \"band a-band b\").  The ordering of bands in either way does\
      \ not matter (that is, \"band a-band b\" will address the same connection as\
      \ \"band b-band a\").  If you are specifying bands by name, preserve any spaces\
      \ between words in the name in the URL - they will be processed normally."
    required: true
    type: "string"
  cityParam:
    name: "city"
    in: "path"
    description: "The ID or name of the target city.  If you are specifying the city\
      \ by name, preserve any spaces between words in the name in the URL - they will\
      \ be processed normally."
    required: true
    type: "string"
  stateParam:
    name: "state"
    in: "path"
    description: "The ID or name of the target state/province/prefecture (state names\
      \ are typically abbreviated, like \"WA\" for \"Washington\").  If you are specifying\
      \ by name, preserve any spaces between words in the name in the URL - they will\
      \ be processed normally."
    required: true
    type: "string"
  countryParam:
    name: "country"
    in: "path"
    description: "The ID or name of the target country.  If you are specifying the\
      \ country by name, preserve any spaces between words in the name in the URL\
      \ - they will be processed normally."
    required: true
    type: "string"
  regionParam:
    name: "region"
    in: "path"
    description: "The ID or name of the target region.  If you are specifying the\
      \ region by name, preserve any spaces between words in the name in the URL -\
      \ they will be processed normally."
    required: true
    type: "string"
  accountParam:
    name: "account"
    in: "path"
    description: "The ID or username of the target account."
    required: true
    type: "string"
  sessionParam:
    name: "session"
    in: "path"
    description: "The ID of the target session."
    required: true
    type: "string"
  editParam:
    name: "edit"
    in: "path"
    description: "The ID of the target edit."
    required: true
    type: "string"
